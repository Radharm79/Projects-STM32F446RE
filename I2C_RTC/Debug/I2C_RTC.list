
I2C_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004584  08004584  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800458c  0800458c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000005c  080045f0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  080045f0  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b3e5  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a65  00000000  00000000  0002b4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002cf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000817  00000000  00000000  0002d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021784  00000000  00000000  0002e197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d7ee  00000000  00000000  0004f91b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caff0  00000000  00000000  0005d109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fd0  00000000  00000000  001280fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0012b0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004480 	.word	0x08004480

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004480 	.word	0x08004480

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <DS1307_Init>:

/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <DS1307_Init+0x1c>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 f806 	bl	80005dc <DS1307_SetClockHalt>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000078 	.word	0x20000078

080005dc <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <DS1307_SetClockHalt+0x14>
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	e000      	b.n	80005f2 <DS1307_SetClockHalt+0x16>
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 f83d 	bl	8000674 <DS1307_GetRegByte>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b25b      	sxtb	r3, r3
 80005fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000602:	b25a      	sxtb	r2, r3
 8000604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000608:	4313      	orrs	r3, r2
 800060a:	b25b      	sxtb	r3, r3
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4619      	mov	r1, r3
 8000610:	2000      	movs	r0, #0
 8000612:	f000 f811 	bl	8000638 <DS1307_SetRegByte>
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <DS1307_GetClockHalt>:

/**
 * @brief Gets clock halt bit.
 * @return Clock halt bit, 0 or 1.
 */
uint8_t DS1307_GetClockHalt(void) {
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
	return (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x80) >> 7;
 8000622:	2000      	movs	r0, #0
 8000624:	f000 f826 	bl	8000674 <DS1307_GetRegByte>
 8000628:	4603      	mov	r3, r0
 800062a:	11db      	asrs	r3, r3, #7
 800062c:	b2db      	uxtb	r3, r3
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	b2db      	uxtb	r3, r3
}
 8000634:	4618      	mov	r0, r3
 8000636:	bd80      	pop	{r7, pc}

08000638 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af02      	add	r7, sp, #8
 800063e:	4603      	mov	r3, r0
 8000640:	460a      	mov	r2, r1
 8000642:	71fb      	strb	r3, [r7, #7]
 8000644:	4613      	mov	r3, r2
 8000646:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	733b      	strb	r3, [r7, #12]
 800064c:	79bb      	ldrb	r3, [r7, #6]
 800064e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <DS1307_SetRegByte+0x38>)
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	f107 020c 	add.w	r2, r7, #12
 8000658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2302      	movs	r3, #2
 8000660:	21d0      	movs	r1, #208	; 0xd0
 8000662:	f001 f9bf 	bl	80019e4 <HAL_I2C_Master_Transmit>
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000078 	.word	0x20000078

08000674 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <DS1307_GetRegByte+0x40>)
 8000680:	6818      	ldr	r0, [r3, #0]
 8000682:	1dfa      	adds	r2, r7, #7
 8000684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2301      	movs	r3, #1
 800068c:	21d0      	movs	r1, #208	; 0xd0
 800068e:	f001 f9a9 	bl	80019e4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <DS1307_GetRegByte+0x40>)
 8000694:	6818      	ldr	r0, [r3, #0]
 8000696:	f107 020f 	add.w	r2, r7, #15
 800069a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2301      	movs	r3, #1
 80006a2:	21d0      	movs	r1, #208	; 0xd0
 80006a4:	f001 fa9c 	bl	8001be0 <HAL_I2C_Master_Receive>
	return val;
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000078 	.word	0x20000078

080006b8 <DS1307_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS1307_GetDayOfWeek(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
 80006bc:	2003      	movs	r0, #3
 80006be:	f7ff ffd9 	bl	8000674 <DS1307_GetRegByte>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f92f 	bl	8000928 <DS1307_DecodeBCD>
 80006ca:	4603      	mov	r3, r0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 80006d4:	2004      	movs	r0, #4
 80006d6:	f7ff ffcd 	bl	8000674 <DS1307_GetRegByte>
 80006da:	4603      	mov	r3, r0
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f923 	bl	8000928 <DS1307_DecodeBCD>
 80006e2:	4603      	mov	r3, r0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 80006ec:	2005      	movs	r0, #5
 80006ee:	f7ff ffc1 	bl	8000674 <DS1307_GetRegByte>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 f917 	bl	8000928 <DS1307_DecodeBCD>
 80006fa:	4603      	mov	r3, r0
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	bd80      	pop	{r7, pc}

08000700 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8000706:	2010      	movs	r0, #16
 8000708:	f7ff ffb4 	bl	8000674 <DS1307_GetRegByte>
 800070c:	4603      	mov	r3, r0
 800070e:	b29b      	uxth	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	0092      	lsls	r2, r2, #2
 8000714:	4413      	add	r3, r2
 8000716:	461a      	mov	r2, r3
 8000718:	0091      	lsls	r1, r2, #2
 800071a:	461a      	mov	r2, r3
 800071c:	460b      	mov	r3, r1
 800071e:	4413      	add	r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8000724:	2006      	movs	r0, #6
 8000726:	f7ff ffa5 	bl	8000674 <DS1307_GetRegByte>
 800072a:	4603      	mov	r3, r0
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f8fb 	bl	8000928 <DS1307_DecodeBCD>
 8000732:	4603      	mov	r3, r0
 8000734:	b29a      	uxth	r2, r3
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	4413      	add	r3, r2
 800073a:	b29b      	uxth	r3, r3
}
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8000748:	2002      	movs	r0, #2
 800074a:	f7ff ff93 	bl	8000674 <DS1307_GetRegByte>
 800074e:	4603      	mov	r3, r0
 8000750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f8e6 	bl	8000928 <DS1307_DecodeBCD>
 800075c:	4603      	mov	r3, r0
}
 800075e:	4618      	mov	r0, r3
 8000760:	bd80      	pop	{r7, pc}

08000762 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 8000762:	b580      	push	{r7, lr}
 8000764:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8000766:	2001      	movs	r0, #1
 8000768:	f7ff ff84 	bl	8000674 <DS1307_GetRegByte>
 800076c:	4603      	mov	r3, r0
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f8da 	bl	8000928 <DS1307_DecodeBCD>
 8000774:	4603      	mov	r3, r0
}
 8000776:	4618      	mov	r0, r3
 8000778:	bd80      	pop	{r7, pc}

0800077a <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 800077e:	2000      	movs	r0, #0
 8000780:	f7ff ff78 	bl	8000674 <DS1307_GetRegByte>
 8000784:	4603      	mov	r3, r0
 8000786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f8cb 	bl	8000928 <DS1307_DecodeBCD>
 8000792:	4603      	mov	r3, r0
}
 8000794:	4618      	mov	r0, r3
 8000796:	bd80      	pop	{r7, pc}

08000798 <DS1307_GetTimeZoneHour>:
/**
 * @brief Gets the stored UTC hour offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC hour offset, -12 to 12.
 */
int8_t DS1307_GetTimeZoneHour(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_HR);
 800079c:	2008      	movs	r0, #8
 800079e:	f7ff ff69 	bl	8000674 <DS1307_GetRegByte>
 80007a2:	4603      	mov	r3, r0
 80007a4:	b25b      	sxtb	r3, r3
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}

080007aa <DS1307_GetTimeZoneMin>:
/**
 * @brief Gets the stored UTC minute offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC time zone, 0 to 59.
 */
uint8_t DS1307_GetTimeZoneMin(void) {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_MIN);
 80007ae:	2009      	movs	r0, #9
 80007b0:	f7ff ff60 	bl	8000674 <DS1307_GetRegByte>
 80007b4:	4603      	mov	r3, r0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	bd80      	pop	{r7, pc}

080007ba <DS1307_SetDayOfWeek>:

/**
 * @brief Sets the current day of week.
 * @param dayOfWeek Days since last Sunday, 0 to 6.
 */
void DS1307_SetDayOfWeek(uint8_t dayOfWeek) {
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	4603      	mov	r3, r0
 80007c2:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DOW, DS1307_EncodeBCD(dayOfWeek));
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f8c8 	bl	800095c <DS1307_EncodeBCD>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4619      	mov	r1, r3
 80007d0:	2003      	movs	r0, #3
 80007d2:	f7ff ff31 	bl	8000638 <DS1307_SetRegByte>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <DS1307_SetDate>:

/**
 * @brief Sets the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS1307_SetDate(uint8_t date) {
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	4603      	mov	r3, r0
 80007e6:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_DATE, DS1307_EncodeBCD(date));
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f8b6 	bl	800095c <DS1307_EncodeBCD>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4619      	mov	r1, r3
 80007f4:	2004      	movs	r0, #4
 80007f6:	f7ff ff1f 	bl	8000638 <DS1307_SetRegByte>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <DS1307_SetMonth>:

/**
 * @brief Sets the current month.
 * @param month Month, 1 to 12.
 */
void DS1307_SetMonth(uint8_t month) {
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MONTH, DS1307_EncodeBCD(month));
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f8a4 	bl	800095c <DS1307_EncodeBCD>
 8000814:	4603      	mov	r3, r0
 8000816:	4619      	mov	r1, r3
 8000818:	2005      	movs	r0, #5
 800081a:	f7ff ff0d 	bl	8000638 <DS1307_SetRegByte>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <DS1307_SetYear>:

/**
 * @brief Sets the current year.
 * @param year Year, 2000 to 2099.
 */
void DS1307_SetYear(uint16_t year) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	80fb      	strh	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_CENT, year / 100);
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	4a10      	ldr	r2, [pc, #64]	; (8000878 <DS1307_SetYear+0x50>)
 8000836:	fba2 2303 	umull	r2, r3, r2, r3
 800083a:	095b      	lsrs	r3, r3, #5
 800083c:	b29b      	uxth	r3, r3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4619      	mov	r1, r3
 8000842:	2010      	movs	r0, #16
 8000844:	f7ff fef8 	bl	8000638 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_YEAR, DS1307_EncodeBCD(year % 100));
 8000848:	88fb      	ldrh	r3, [r7, #6]
 800084a:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <DS1307_SetYear+0x50>)
 800084c:	fba2 1203 	umull	r1, r2, r2, r3
 8000850:	0952      	lsrs	r2, r2, #5
 8000852:	2164      	movs	r1, #100	; 0x64
 8000854:	fb01 f202 	mul.w	r2, r1, r2
 8000858:	1a9b      	subs	r3, r3, r2
 800085a:	b29b      	uxth	r3, r3
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f87c 	bl	800095c <DS1307_EncodeBCD>
 8000864:	4603      	mov	r3, r0
 8000866:	4619      	mov	r1, r3
 8000868:	2006      	movs	r0, #6
 800086a:	f7ff fee5 	bl	8000638 <DS1307_SetRegByte>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	51eb851f 	.word	0x51eb851f

0800087c <DS1307_SetHour>:

/**
 * @brief Sets the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS1307_SetHour(uint8_t hour_24mode) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_HOUR, DS1307_EncodeBCD(hour_24mode & 0x3f));
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f864 	bl	800095c <DS1307_EncodeBCD>
 8000894:	4603      	mov	r3, r0
 8000896:	4619      	mov	r1, r3
 8000898:	2002      	movs	r0, #2
 800089a:	f7ff fecd 	bl	8000638 <DS1307_SetRegByte>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <DS1307_SetMinute>:

/**
 * @brief Sets the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS1307_SetMinute(uint8_t minute) {
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
	DS1307_SetRegByte(DS1307_REG_MINUTE, DS1307_EncodeBCD(minute));
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f852 	bl	800095c <DS1307_EncodeBCD>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4619      	mov	r1, r3
 80008bc:	2001      	movs	r0, #1
 80008be:	f7ff febb 	bl	8000638 <DS1307_SetRegByte>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <DS1307_SetSecond>:

/**
 * @brief Sets the current second.
 * @param second Second, 0 to 59.
 */
void DS1307_SetSecond(uint8_t second) {
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b084      	sub	sp, #16
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	4603      	mov	r3, r0
 80008d2:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = DS1307_GetClockHalt();
 80008d4:	f7ff fea3 	bl	800061e <DS1307_GetClockHalt>
 80008d8:	4603      	mov	r3, r0
 80008da:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, DS1307_EncodeBCD(second | ch));
 80008dc:	79fa      	ldrb	r2, [r7, #7]
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f000 f839 	bl	800095c <DS1307_EncodeBCD>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4619      	mov	r1, r3
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff fea2 	bl	8000638 <DS1307_SetRegByte>
}
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <DS1307_SetTimeZone>:
 * @brief Sets UTC offset.
 * @note  UTC offset is not updated automatically.
 * @param hr UTC hour offset, -12 to 12.
 * @param min UTC minute offset, 0 to 59.
 */
void DS1307_SetTimeZone(int8_t hr, uint8_t min) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	460a      	mov	r2, r1
 8000906:	71fb      	strb	r3, [r7, #7]
 8000908:	4613      	mov	r3, r2
 800090a:	71bb      	strb	r3, [r7, #6]
	DS1307_SetRegByte(DS1307_REG_UTC_HR, hr);
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	4619      	mov	r1, r3
 8000910:	2008      	movs	r0, #8
 8000912:	f7ff fe91 	bl	8000638 <DS1307_SetRegByte>
	DS1307_SetRegByte(DS1307_REG_UTC_MIN, min);
 8000916:	79bb      	ldrb	r3, [r7, #6]
 8000918:	4619      	mov	r1, r3
 800091a:	2009      	movs	r0, #9
 800091c:	f7ff fe8c 	bl	8000638 <DS1307_SetRegByte>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	091b      	lsrs	r3, r3, #4
 8000936:	b2db      	uxtb	r3, r3
 8000938:	461a      	mov	r2, r3
 800093a:	0092      	lsls	r2, r2, #2
 800093c:	4413      	add	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	b2da      	uxtb	r2, r3
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	f003 030f 	and.w	r3, r3, #15
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4413      	add	r3, r2
 800094c:	b2db      	uxtb	r3, r3
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <DS1307_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS1307_EncodeBCD(uint8_t dec) {
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8000966:	79fa      	ldrb	r2, [r7, #7]
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <DS1307_EncodeBCD+0x40>)
 800096a:	fba3 1302 	umull	r1, r3, r3, r2
 800096e:	08d9      	lsrs	r1, r3, #3
 8000970:	460b      	mov	r3, r1
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	440b      	add	r3, r1
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	b2da      	uxtb	r2, r3
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4907      	ldr	r1, [pc, #28]	; (800099c <DS1307_EncodeBCD+0x40>)
 8000980:	fba1 1303 	umull	r1, r3, r1, r3
 8000984:	08db      	lsrs	r3, r3, #3
 8000986:	b2db      	uxtb	r3, r3
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	b2db      	uxtb	r3, r3
 800098c:	4413      	add	r3, r2
 800098e:	b2db      	uxtb	r3, r3
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	cccccccd 	.word	0xcccccccd

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009a4:	b0ac      	sub	sp, #176	; 0xb0
 80009a6:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a8:	f000 fbae 	bl	8001108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ac:	f000 f8a4 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b0:	f000 f984 	bl	8000cbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009b4:	f000 f958 	bl	8000c68 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009b8:	f000 f8fe 	bl	8000bb8 <MX_I2C1_Init>
  MX_UART4_Init();
 80009bc:	f000 f92a 	bl	8000c14 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	/* Lookup table for the days of week. */
	const char *DAYS_OF_WEEK[7] = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
 80009c0:	4b49      	ldr	r3, [pc, #292]	; (8000ae8 <main+0x148>)
 80009c2:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80009c6:	461d      	mov	r5, r3
 80009c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	/* Start DS1307 timing. Pass user I2C handle pointer to function. */
	DS1307_Init(&hi2c1);
 80009d4:	4845      	ldr	r0, [pc, #276]	; (8000aec <main+0x14c>)
 80009d6:	f7ff fdf1 	bl	80005bc <DS1307_Init>
	/* To test leap year correction. */
	DS1307_SetTimeZone(+8, 00);
 80009da:	2100      	movs	r1, #0
 80009dc:	2008      	movs	r0, #8
 80009de:	f7ff ff8d 	bl	80008fc <DS1307_SetTimeZone>
	DS1307_SetDate(29);
 80009e2:	201d      	movs	r0, #29
 80009e4:	f7ff fefb 	bl	80007de <DS1307_SetDate>
	DS1307_SetMonth(2);
 80009e8:	2002      	movs	r0, #2
 80009ea:	f7ff ff0a 	bl	8000802 <DS1307_SetMonth>
	DS1307_SetYear(2024);
 80009ee:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
 80009f2:	f7ff ff19 	bl	8000828 <DS1307_SetYear>
	DS1307_SetDayOfWeek(4);
 80009f6:	2004      	movs	r0, #4
 80009f8:	f7ff fedf 	bl	80007ba <DS1307_SetDayOfWeek>
	DS1307_SetHour(23);
 80009fc:	2017      	movs	r0, #23
 80009fe:	f7ff ff3d 	bl	800087c <DS1307_SetHour>
	DS1307_SetMinute(59);
 8000a02:	203b      	movs	r0, #59	; 0x3b
 8000a04:	f7ff ff4f 	bl	80008a6 <DS1307_SetMinute>
	DS1307_SetSecond(30);
 8000a08:	201e      	movs	r0, #30
 8000a0a:	f7ff ff5e 	bl	80008ca <DS1307_SetSecond>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		/* Get current date and time. */
		uint8_t date = DS1307_GetDate();
 8000a0e:	f7ff fe5f 	bl	80006d0 <DS1307_GetDate>
 8000a12:	4603      	mov	r3, r0
 8000a14:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		uint8_t month = DS1307_GetMonth();
 8000a18:	f7ff fe66 	bl	80006e8 <DS1307_GetMonth>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		uint16_t year = DS1307_GetYear();
 8000a22:	f7ff fe6d 	bl	8000700 <DS1307_GetYear>
 8000a26:	4603      	mov	r3, r0
 8000a28:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
		uint8_t dow = DS1307_GetDayOfWeek();
 8000a2c:	f7ff fe44 	bl	80006b8 <DS1307_GetDayOfWeek>
 8000a30:	4603      	mov	r3, r0
 8000a32:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
		uint8_t hour = DS1307_GetHour();
 8000a36:	f7ff fe85 	bl	8000744 <DS1307_GetHour>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
		uint8_t minute = DS1307_GetMinute();
 8000a40:	f7ff fe8f 	bl	8000762 <DS1307_GetMinute>
 8000a44:	4603      	mov	r3, r0
 8000a46:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
		uint8_t second = DS1307_GetSecond();
 8000a4a:	f7ff fe96 	bl	800077a <DS1307_GetSecond>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
		int8_t zone_hr = DS1307_GetTimeZoneHour();
 8000a54:	f7ff fea0 	bl	8000798 <DS1307_GetTimeZoneHour>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		uint8_t zone_min = DS1307_GetTimeZoneMin();
 8000a5e:	f7ff fea4 	bl	80007aa <DS1307_GetTimeZoneMin>
 8000a62:	4603      	mov	r3, r0
 8000a64:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		char buffer[100] = { 0 };
 8000a68:	2300      	movs	r3, #0
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	2260      	movs	r2, #96	; 0x60
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f003 f87f 	bl	8003b78 <memset>
		sprintf(buffer, "ISO8601 FORMAT: %04d-%02d-%02dT%02d:%02d:%02d%+03d:%02d  %s\n",
 8000a7a:	f8b7 e08c 	ldrh.w	lr, [r7, #140]	; 0x8c
 8000a7e:	f897 808e 	ldrb.w	r8, [r7, #142]	; 0x8e
 8000a82:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8000a86:	f897 108a 	ldrb.w	r1, [r7, #138]	; 0x8a
 8000a8a:	f897 0089 	ldrb.w	r0, [r7, #137]	; 0x89
 8000a8e:	f897 4088 	ldrb.w	r4, [r7, #136]	; 0x88
 8000a92:	f997 5087 	ldrsb.w	r5, [r7, #135]	; 0x87
 8000a96:	f897 6086 	ldrb.w	r6, [r7, #134]	; 0x86
 8000a9a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	3390      	adds	r3, #144	; 0x90
 8000aa2:	443b      	add	r3, r7
 8000aa4:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000aa8:	f107 0c04 	add.w	ip, r7, #4
 8000aac:	9306      	str	r3, [sp, #24]
 8000aae:	9605      	str	r6, [sp, #20]
 8000ab0:	9504      	str	r5, [sp, #16]
 8000ab2:	9403      	str	r4, [sp, #12]
 8000ab4:	9002      	str	r0, [sp, #8]
 8000ab6:	9101      	str	r1, [sp, #4]
 8000ab8:	9200      	str	r2, [sp, #0]
 8000aba:	4643      	mov	r3, r8
 8000abc:	4672      	mov	r2, lr
 8000abe:	490c      	ldr	r1, [pc, #48]	; (8000af0 <main+0x150>)
 8000ac0:	4660      	mov	r0, ip
 8000ac2:	f003 f839 	bl	8003b38 <siprintf>
				year, month, date, hour, minute, second, zone_hr, zone_min, DAYS_OF_WEEK[dow]);
		/* May show warning below. Ignore and proceed. */
		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fba1 	bl	8000210 <strlen>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	1d39      	adds	r1, r7, #4
 8000ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad8:	4806      	ldr	r0, [pc, #24]	; (8000af4 <main+0x154>)
 8000ada:	f002 fc71 	bl	80033c0 <HAL_UART_Transmit>
		HAL_Delay(250);
 8000ade:	20fa      	movs	r0, #250	; 0xfa
 8000ae0:	f000 fb84 	bl	80011ec <HAL_Delay>
	while (1) {
 8000ae4:	e793      	b.n	8000a0e <main+0x6e>
 8000ae6:	bf00      	nop
 8000ae8:	0800451c 	.word	0x0800451c
 8000aec:	2000007c 	.word	0x2000007c
 8000af0:	08004498 	.word	0x08004498
 8000af4:	20000118 	.word	0x20000118

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	; 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2234      	movs	r2, #52	; 0x34
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 f836 	bl	8003b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 0308 	add.w	r3, r7, #8
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <SystemClock_Config+0xb8>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <SystemClock_Config+0xb8>)
 8000b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <SystemClock_Config+0xb8>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <SystemClock_Config+0xbc>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b44:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <SystemClock_Config+0xbc>)
 8000b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4a:	6013      	str	r3, [r2, #0]
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <SystemClock_Config+0xbc>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b60:	2310      	movs	r3, #16
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 f939 	bl	8002de4 <HAL_RCC_OscConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b78:	f000 f936 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 fdd9 	bl	8002750 <HAL_RCC_ClockConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000ba4:	f000 f920 	bl	8000de8 <Error_Handler>
  }
}
 8000ba8:	bf00      	nop
 8000baa:	3750      	adds	r7, #80	; 0x50
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40007000 	.word	0x40007000

08000bb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bbe:	4a13      	ldr	r2, [pc, #76]	; (8000c0c <MX_I2C1_Init+0x54>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bc4:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <MX_I2C1_Init+0x58>)
 8000bc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_I2C1_Init+0x50>)
 8000bf6:	f000 fdb1 	bl	800175c <HAL_I2C_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c00:	f000 f8f2 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000007c 	.word	0x2000007c
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	000186a0 	.word	0x000186a0

08000c14 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <MX_UART4_Init+0x50>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_UART4_Init+0x4c>)
 8000c4c:	f002 fb68 	bl	8003320 <HAL_UART_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000c56:	f000 f8c7 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000d0 	.word	0x200000d0
 8000c64:	40004c00 	.word	0x40004c00

08000c68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <MX_USART2_UART_Init+0x50>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	f002 fb3e 	bl	8003320 <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000caa:	f000 f89d 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000118 	.word	0x20000118
 8000cb8:	40004400 	.word	0x40004400

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b40      	ldr	r3, [pc, #256]	; (8000dd8 <MX_GPIO_Init+0x11c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a3f      	ldr	r2, [pc, #252]	; (8000dd8 <MX_GPIO_Init+0x11c>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b3d      	ldr	r3, [pc, #244]	; (8000dd8 <MX_GPIO_Init+0x11c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b39      	ldr	r3, [pc, #228]	; (8000dd8 <MX_GPIO_Init+0x11c>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a38      	ldr	r2, [pc, #224]	; (8000dd8 <MX_GPIO_Init+0x11c>)
 8000cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b36      	ldr	r3, [pc, #216]	; (8000dd8 <MX_GPIO_Init+0x11c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <MX_GPIO_Init+0x11c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a31      	ldr	r2, [pc, #196]	; (8000dd8 <MX_GPIO_Init+0x11c>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b2f      	ldr	r3, [pc, #188]	; (8000dd8 <MX_GPIO_Init+0x11c>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b2b      	ldr	r3, [pc, #172]	; (8000dd8 <MX_GPIO_Init+0x11c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a2a      	ldr	r2, [pc, #168]	; (8000dd8 <MX_GPIO_Init+0x11c>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <MX_GPIO_Init+0x11c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d42:	2200      	movs	r2, #0
 8000d44:	21ff      	movs	r1, #255	; 0xff
 8000d46:	4825      	ldr	r0, [pc, #148]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000d48:	f000 fcee 	bl	8001728 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2120      	movs	r1, #32
 8000d50:	4823      	ldr	r0, [pc, #140]	; (8000de0 <MX_GPIO_Init+0x124>)
 8000d52:	f000 fce9 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	21e0      	movs	r1, #224	; 0xe0
 8000d5a:	4822      	ldr	r0, [pc, #136]	; (8000de4 <MX_GPIO_Init+0x128>)
 8000d5c:	f000 fce4 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4819      	ldr	r0, [pc, #100]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000d78:	f000 fb42 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d7c:	23ff      	movs	r3, #255	; 0xff
 8000d7e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	4812      	ldr	r0, [pc, #72]	; (8000ddc <MX_GPIO_Init+0x120>)
 8000d94:	f000 fb34 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d98:	2320      	movs	r3, #32
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	480c      	ldr	r0, [pc, #48]	; (8000de0 <MX_GPIO_Init+0x124>)
 8000db0:	f000 fb26 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000db4:	23e0      	movs	r3, #224	; 0xe0
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4806      	ldr	r0, [pc, #24]	; (8000de4 <MX_GPIO_Init+0x128>)
 8000dcc:	f000 fb18 	bl	8001400 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020800 	.word	0x40020800
 8000de0:	40020000 	.word	0x40020000
 8000de4:	40020400 	.word	0x40020400

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	603b      	str	r3, [r7, #0]
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_MspInit+0x4c>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e36:	2007      	movs	r0, #7
 8000e38:	f000 faae 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800

08000e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <HAL_I2C_MspInit+0x84>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12c      	bne.n	8000ec4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8c:	2312      	movs	r3, #18
 8000e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <HAL_I2C_MspInit+0x8c>)
 8000ea4:	f000 faac 	bl	8001400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000eb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a32      	ldr	r2, [pc, #200]	; (8000fc0 <HAL_UART_MspInit+0xe8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d12c      	bne.n	8000f54 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	4b31      	ldr	r3, [pc, #196]	; (8000fc4 <HAL_UART_MspInit+0xec>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a30      	ldr	r2, [pc, #192]	; (8000fc4 <HAL_UART_MspInit+0xec>)
 8000f04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b2e      	ldr	r3, [pc, #184]	; (8000fc4 <HAL_UART_MspInit+0xec>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	4b2a      	ldr	r3, [pc, #168]	; (8000fc4 <HAL_UART_MspInit+0xec>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a29      	ldr	r2, [pc, #164]	; (8000fc4 <HAL_UART_MspInit+0xec>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <HAL_UART_MspInit+0xec>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f32:	2303      	movs	r3, #3
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f42:	2308      	movs	r3, #8
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481e      	ldr	r0, [pc, #120]	; (8000fc8 <HAL_UART_MspInit+0xf0>)
 8000f4e:	f000 fa57 	bl	8001400 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f52:	e030      	b.n	8000fb6 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <HAL_UART_MspInit+0xf4>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d12b      	bne.n	8000fb6 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <HAL_UART_MspInit+0xec>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <HAL_UART_MspInit+0xec>)
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_UART_MspInit+0xec>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_UART_MspInit+0xec>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <HAL_UART_MspInit+0xec>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_UART_MspInit+0xec>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f96:	230c      	movs	r3, #12
 8000f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <HAL_UART_MspInit+0xf0>)
 8000fb2:	f000 fa25 	bl	8001400 <HAL_GPIO_Init>
}
 8000fb6:	bf00      	nop
 8000fb8:	3730      	adds	r7, #48	; 0x30
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40004c00 	.word	0x40004c00
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40004400 	.word	0x40004400

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <UsageFault_Handler+0x4>

08000fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101c:	f000 f8c6 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800102c:	4a14      	ldr	r2, [pc, #80]	; (8001080 <_sbrk+0x5c>)
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <_sbrk+0x60>)
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001038:	4b13      	ldr	r3, [pc, #76]	; (8001088 <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <_sbrk+0x64>)
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <_sbrk+0x68>)
 8001044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <_sbrk+0x64>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	429a      	cmp	r2, r3
 8001052:	d207      	bcs.n	8001064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001054:	f002 fd98 	bl	8003b88 <__errno>
 8001058:	4603      	mov	r3, r0
 800105a:	220c      	movs	r2, #12
 800105c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	e009      	b.n	8001078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <_sbrk+0x64>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4413      	add	r3, r2
 8001072:	4a05      	ldr	r2, [pc, #20]	; (8001088 <_sbrk+0x64>)
 8001074:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001076:	68fb      	ldr	r3, [r7, #12]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20020000 	.word	0x20020000
 8001084:	00000400 	.word	0x00000400
 8001088:	20000160 	.word	0x20000160
 800108c:	200002b0 	.word	0x200002b0

08001090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <SystemInit+0x20>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <SystemInit+0x20>)
 800109c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010b8:	f7ff ffea 	bl	8001090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010be:	490d      	ldr	r1, [pc, #52]	; (80010f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d4:	4c0a      	ldr	r4, [pc, #40]	; (8001100 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010e2:	f002 fd57 	bl	8003b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e6:	f7ff fc5b 	bl	80009a0 <main>
  bx  lr    
 80010ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010f8:	08004594 	.word	0x08004594
  ldr r2, =_sbss
 80010fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001100:	200002b0 	.word	0x200002b0

08001104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC_IRQHandler>
	...

08001108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <HAL_Init+0x40>)
 8001112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <HAL_Init+0x40>)
 800111e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_Init+0x40>)
 800112a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001130:	2003      	movs	r0, #3
 8001132:	f000 f931 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001136:	2000      	movs	r0, #0
 8001138:	f000 f808 	bl	800114c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800113c:	f7ff fe5c 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023c00 	.word	0x40023c00

0800114c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x54>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_InitTick+0x58>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	fbb3 f3f1 	udiv	r3, r3, r1
 8001166:	fbb2 f3f3 	udiv	r3, r2, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f93b 	bl	80013e6 <HAL_SYSTICK_Config>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e00e      	b.n	8001198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d80a      	bhi.n	8001196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001180:	2200      	movs	r2, #0
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f000 f911 	bl	80013ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800118c:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <HAL_InitTick+0x5c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000000 	.word	0x20000000
 80011a4:	20000008 	.word	0x20000008
 80011a8:	20000004 	.word	0x20000004

080011ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_IncTick+0x20>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_IncTick+0x24>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <HAL_IncTick+0x24>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000164 	.word	0x20000164

080011d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTick;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <HAL_GetTick+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000164 	.word	0x20000164

080011ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff ffee 	bl	80011d4 <HAL_GetTick>
 80011f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001204:	d005      	beq.n	8001212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_Delay+0x44>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001212:	bf00      	nop
 8001214:	f7ff ffde 	bl	80011d4 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	429a      	cmp	r2, r3
 8001222:	d8f7      	bhi.n	8001214 <HAL_Delay+0x28>
  {
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	; (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	; (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f7ff ff8e 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	; (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff47 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c0:	f7ff ff5c 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff ff8e 	bl	80012ec <NVIC_EncodePriority>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff5d 	bl	8001298 <__NVIC_SetPriority>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff ffb0 	bl	8001354 <SysTick_Config>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
 800141a:	e165      	b.n	80016e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800141c:	2201      	movs	r2, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	429a      	cmp	r2, r3
 8001436:	f040 8154 	bne.w	80016e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	2b01      	cmp	r3, #1
 8001444:	d005      	beq.n	8001452 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144e:	2b02      	cmp	r3, #2
 8001450:	d130      	bne.n	80014b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	2203      	movs	r2, #3
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001488:	2201      	movs	r2, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	091b      	lsrs	r3, r3, #4
 800149e:	f003 0201 	and.w	r2, r3, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d017      	beq.n	80014f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	2203      	movs	r2, #3
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d123      	bne.n	8001544 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	08da      	lsrs	r2, r3, #3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3208      	adds	r2, #8
 8001504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	220f      	movs	r2, #15
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	08da      	lsrs	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3208      	adds	r2, #8
 800153e:	69b9      	ldr	r1, [r7, #24]
 8001540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2203      	movs	r2, #3
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0203 	and.w	r2, r3, #3
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80ae 	beq.w	80016e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b5d      	ldr	r3, [pc, #372]	; (8001700 <HAL_GPIO_Init+0x300>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	4a5c      	ldr	r2, [pc, #368]	; (8001700 <HAL_GPIO_Init+0x300>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001594:	6453      	str	r3, [r2, #68]	; 0x44
 8001596:	4b5a      	ldr	r3, [pc, #360]	; (8001700 <HAL_GPIO_Init+0x300>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015a2:	4a58      	ldr	r2, [pc, #352]	; (8001704 <HAL_GPIO_Init+0x304>)
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	3302      	adds	r3, #2
 80015aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	220f      	movs	r2, #15
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4f      	ldr	r2, [pc, #316]	; (8001708 <HAL_GPIO_Init+0x308>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d025      	beq.n	800161a <HAL_GPIO_Init+0x21a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4e      	ldr	r2, [pc, #312]	; (800170c <HAL_GPIO_Init+0x30c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d01f      	beq.n	8001616 <HAL_GPIO_Init+0x216>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4d      	ldr	r2, [pc, #308]	; (8001710 <HAL_GPIO_Init+0x310>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d019      	beq.n	8001612 <HAL_GPIO_Init+0x212>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4c      	ldr	r2, [pc, #304]	; (8001714 <HAL_GPIO_Init+0x314>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0x20e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4b      	ldr	r2, [pc, #300]	; (8001718 <HAL_GPIO_Init+0x318>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00d      	beq.n	800160a <HAL_GPIO_Init+0x20a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4a      	ldr	r2, [pc, #296]	; (800171c <HAL_GPIO_Init+0x31c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d007      	beq.n	8001606 <HAL_GPIO_Init+0x206>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a49      	ldr	r2, [pc, #292]	; (8001720 <HAL_GPIO_Init+0x320>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_GPIO_Init+0x202>
 80015fe:	2306      	movs	r3, #6
 8001600:	e00c      	b.n	800161c <HAL_GPIO_Init+0x21c>
 8001602:	2307      	movs	r3, #7
 8001604:	e00a      	b.n	800161c <HAL_GPIO_Init+0x21c>
 8001606:	2305      	movs	r3, #5
 8001608:	e008      	b.n	800161c <HAL_GPIO_Init+0x21c>
 800160a:	2304      	movs	r3, #4
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x21c>
 800160e:	2303      	movs	r3, #3
 8001610:	e004      	b.n	800161c <HAL_GPIO_Init+0x21c>
 8001612:	2302      	movs	r3, #2
 8001614:	e002      	b.n	800161c <HAL_GPIO_Init+0x21c>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_GPIO_Init+0x21c>
 800161a:	2300      	movs	r3, #0
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	f002 0203 	and.w	r2, r2, #3
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	4093      	lsls	r3, r2
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800162c:	4935      	ldr	r1, [pc, #212]	; (8001704 <HAL_GPIO_Init+0x304>)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163a:	4b3a      	ldr	r3, [pc, #232]	; (8001724 <HAL_GPIO_Init+0x324>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165e:	4a31      	ldr	r2, [pc, #196]	; (8001724 <HAL_GPIO_Init+0x324>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <HAL_GPIO_Init+0x324>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001688:	4a26      	ldr	r2, [pc, #152]	; (8001724 <HAL_GPIO_Init+0x324>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <HAL_GPIO_Init+0x324>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b2:	4a1c      	ldr	r2, [pc, #112]	; (8001724 <HAL_GPIO_Init+0x324>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <HAL_GPIO_Init+0x324>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016dc:	4a11      	ldr	r2, [pc, #68]	; (8001724 <HAL_GPIO_Init+0x324>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3301      	adds	r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	f67f ae96 	bls.w	800141c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40013800 	.word	0x40013800
 8001708:	40020000 	.word	0x40020000
 800170c:	40020400 	.word	0x40020400
 8001710:	40020800 	.word	0x40020800
 8001714:	40020c00 	.word	0x40020c00
 8001718:	40021000 	.word	0x40021000
 800171c:	40021400 	.word	0x40021400
 8001720:	40021800 	.word	0x40021800
 8001724:	40013c00 	.word	0x40013c00

08001728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
 8001734:	4613      	mov	r3, r2
 8001736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001738:	787b      	ldrb	r3, [r7, #1]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001744:	e003      	b.n	800174e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	041a      	lsls	r2, r3, #16
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	619a      	str	r2, [r3, #24]
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e12b      	b.n	80019c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d106      	bne.n	8001788 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff fb60 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2224      	movs	r2, #36	; 0x24
 800178c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017c0:	f001 f8b8 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 80017c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4a81      	ldr	r2, [pc, #516]	; (80019d0 <HAL_I2C_Init+0x274>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d807      	bhi.n	80017e0 <HAL_I2C_Init+0x84>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4a80      	ldr	r2, [pc, #512]	; (80019d4 <HAL_I2C_Init+0x278>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	bf94      	ite	ls
 80017d8:	2301      	movls	r3, #1
 80017da:	2300      	movhi	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	e006      	b.n	80017ee <HAL_I2C_Init+0x92>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4a7d      	ldr	r2, [pc, #500]	; (80019d8 <HAL_I2C_Init+0x27c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	bf94      	ite	ls
 80017e8:	2301      	movls	r3, #1
 80017ea:	2300      	movhi	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e0e7      	b.n	80019c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4a78      	ldr	r2, [pc, #480]	; (80019dc <HAL_I2C_Init+0x280>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	0c9b      	lsrs	r3, r3, #18
 8001800:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	430a      	orrs	r2, r1
 8001814:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	4a6a      	ldr	r2, [pc, #424]	; (80019d0 <HAL_I2C_Init+0x274>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d802      	bhi.n	8001830 <HAL_I2C_Init+0xd4>
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	3301      	adds	r3, #1
 800182e:	e009      	b.n	8001844 <HAL_I2C_Init+0xe8>
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001836:	fb02 f303 	mul.w	r3, r2, r3
 800183a:	4a69      	ldr	r2, [pc, #420]	; (80019e0 <HAL_I2C_Init+0x284>)
 800183c:	fba2 2303 	umull	r2, r3, r2, r3
 8001840:	099b      	lsrs	r3, r3, #6
 8001842:	3301      	adds	r3, #1
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	430b      	orrs	r3, r1
 800184a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001856:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	495c      	ldr	r1, [pc, #368]	; (80019d0 <HAL_I2C_Init+0x274>)
 8001860:	428b      	cmp	r3, r1
 8001862:	d819      	bhi.n	8001898 <HAL_I2C_Init+0x13c>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	1e59      	subs	r1, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001872:	1c59      	adds	r1, r3, #1
 8001874:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001878:	400b      	ands	r3, r1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d00a      	beq.n	8001894 <HAL_I2C_Init+0x138>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1e59      	subs	r1, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fbb1 f3f3 	udiv	r3, r1, r3
 800188c:	3301      	adds	r3, #1
 800188e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001892:	e051      	b.n	8001938 <HAL_I2C_Init+0x1dc>
 8001894:	2304      	movs	r3, #4
 8001896:	e04f      	b.n	8001938 <HAL_I2C_Init+0x1dc>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d111      	bne.n	80018c4 <HAL_I2C_Init+0x168>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1e58      	subs	r0, r3, #1
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6859      	ldr	r1, [r3, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	440b      	add	r3, r1
 80018ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf0c      	ite	eq
 80018bc:	2301      	moveq	r3, #1
 80018be:	2300      	movne	r3, #0
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	e012      	b.n	80018ea <HAL_I2C_Init+0x18e>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	1e58      	subs	r0, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6859      	ldr	r1, [r3, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	0099      	lsls	r1, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018da:	3301      	adds	r3, #1
 80018dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	bf0c      	ite	eq
 80018e4:	2301      	moveq	r3, #1
 80018e6:	2300      	movne	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_I2C_Init+0x196>
 80018ee:	2301      	movs	r3, #1
 80018f0:	e022      	b.n	8001938 <HAL_I2C_Init+0x1dc>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10e      	bne.n	8001918 <HAL_I2C_Init+0x1bc>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1e58      	subs	r0, r3, #1
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6859      	ldr	r1, [r3, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	440b      	add	r3, r1
 8001908:	fbb0 f3f3 	udiv	r3, r0, r3
 800190c:	3301      	adds	r3, #1
 800190e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001916:	e00f      	b.n	8001938 <HAL_I2C_Init+0x1dc>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1e58      	subs	r0, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6859      	ldr	r1, [r3, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	0099      	lsls	r1, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	fbb0 f3f3 	udiv	r3, r0, r3
 800192e:	3301      	adds	r3, #1
 8001930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	6809      	ldr	r1, [r1, #0]
 800193c:	4313      	orrs	r3, r2
 800193e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69da      	ldr	r2, [r3, #28]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001966:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6911      	ldr	r1, [r2, #16]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68d2      	ldr	r2, [r2, #12]
 8001972:	4311      	orrs	r1, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	430b      	orrs	r3, r1
 800197a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2220      	movs	r2, #32
 80019b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	000186a0 	.word	0x000186a0
 80019d4:	001e847f 	.word	0x001e847f
 80019d8:	003d08ff 	.word	0x003d08ff
 80019dc:	431bde83 	.word	0x431bde83
 80019e0:	10624dd3 	.word	0x10624dd3

080019e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	461a      	mov	r2, r3
 80019f0:	460b      	mov	r3, r1
 80019f2:	817b      	strh	r3, [r7, #10]
 80019f4:	4613      	mov	r3, r2
 80019f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019f8:	f7ff fbec 	bl	80011d4 <HAL_GetTick>
 80019fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b20      	cmp	r3, #32
 8001a08:	f040 80e0 	bne.w	8001bcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2319      	movs	r3, #25
 8001a12:	2201      	movs	r2, #1
 8001a14:	4970      	ldr	r1, [pc, #448]	; (8001bd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 fc64 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a22:	2302      	movs	r3, #2
 8001a24:	e0d3      	b.n	8001bce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_I2C_Master_Transmit+0x50>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e0cc      	b.n	8001bce <HAL_I2C_Master_Transmit+0x1ea>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d007      	beq.n	8001a5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0201 	orr.w	r2, r2, #1
 8001a58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2221      	movs	r2, #33	; 0x21
 8001a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2210      	movs	r2, #16
 8001a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	893a      	ldrh	r2, [r7, #8]
 8001a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4a50      	ldr	r2, [pc, #320]	; (8001bdc <HAL_I2C_Master_Transmit+0x1f8>)
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a9c:	8979      	ldrh	r1, [r7, #10]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	6a3a      	ldr	r2, [r7, #32]
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 face 	bl	8002044 <I2C_MasterRequestWrite>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e08d      	b.n	8001bce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ac8:	e066      	b.n	8001b98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	6a39      	ldr	r1, [r7, #32]
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f000 fd22 	bl	8002518 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00d      	beq.n	8001af6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d107      	bne.n	8001af2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e06b      	b.n	8001bce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	781a      	ldrb	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d11b      	bne.n	8001b6c <HAL_I2C_Master_Transmit+0x188>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d017      	beq.n	8001b6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	781a      	ldrb	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	6a39      	ldr	r1, [r7, #32]
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 fd19 	bl	80025a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00d      	beq.n	8001b98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d107      	bne.n	8001b94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e01a      	b.n	8001bce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d194      	bne.n	8001aca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e000      	b.n	8001bce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001bcc:	2302      	movs	r3, #2
  }
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	00100002 	.word	0x00100002
 8001bdc:	ffff0000 	.word	0xffff0000

08001be0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08c      	sub	sp, #48	; 0x30
 8001be4:	af02      	add	r7, sp, #8
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	461a      	mov	r2, r3
 8001bec:	460b      	mov	r3, r1
 8001bee:	817b      	strh	r3, [r7, #10]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bf4:	f7ff faee 	bl	80011d4 <HAL_GetTick>
 8001bf8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	f040 8217 	bne.w	8002036 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2319      	movs	r3, #25
 8001c0e:	2201      	movs	r2, #1
 8001c10:	497c      	ldr	r1, [pc, #496]	; (8001e04 <HAL_I2C_Master_Receive+0x224>)
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 fb66 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e20a      	b.n	8002038 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_I2C_Master_Receive+0x50>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e203      	b.n	8002038 <HAL_I2C_Master_Receive+0x458>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d007      	beq.n	8001c56 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0201 	orr.w	r2, r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c64:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2222      	movs	r2, #34	; 0x22
 8001c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2210      	movs	r2, #16
 8001c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	893a      	ldrh	r2, [r7, #8]
 8001c86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4a5c      	ldr	r2, [pc, #368]	; (8001e08 <HAL_I2C_Master_Receive+0x228>)
 8001c96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c98:	8979      	ldrh	r1, [r7, #10]
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 fa52 	bl	8002148 <I2C_MasterRequestRead>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e1c4      	b.n	8002038 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d113      	bne.n	8001cde <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	623b      	str	r3, [r7, #32]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	623b      	str	r3, [r7, #32]
 8001cca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e198      	b.n	8002010 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d11b      	bne.n	8001d1e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e178      	b.n	8002010 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d11b      	bne.n	8001d5e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	e158      	b.n	8002010 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d84:	e144      	b.n	8002010 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	f200 80f1 	bhi.w	8001f72 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d123      	bne.n	8001de0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 fc4b 	bl	8002638 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e145      	b.n	8002038 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dde:	e117      	b.n	8002010 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d14e      	bne.n	8001e86 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dee:	2200      	movs	r2, #0
 8001df0:	4906      	ldr	r1, [pc, #24]	; (8001e0c <HAL_I2C_Master_Receive+0x22c>)
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 fa76 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d008      	beq.n	8001e10 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e11a      	b.n	8002038 <HAL_I2C_Master_Receive+0x458>
 8001e02:	bf00      	nop
 8001e04:	00100002 	.word	0x00100002
 8001e08:	ffff0000 	.word	0xffff0000
 8001e0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691a      	ldr	r2, [r3, #16]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e84:	e0c4      	b.n	8002010 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	496c      	ldr	r1, [pc, #432]	; (8002040 <HAL_I2C_Master_Receive+0x460>)
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	f000 fa27 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0cb      	b.n	8002038 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	3b01      	subs	r3, #1
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4955      	ldr	r1, [pc, #340]	; (8002040 <HAL_I2C_Master_Receive+0x460>)
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 f9f9 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e09d      	b.n	8002038 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f70:	e04e      	b.n	8002010 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 fb5e 	bl	8002638 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e058      	b.n	8002038 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d124      	bne.n	8002010 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d107      	bne.n	8001fde <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fdc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	2b00      	cmp	r3, #0
 8002016:	f47f aeb6 	bne.w	8001d86 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e000      	b.n	8002038 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002036:	2302      	movs	r3, #2
  }
}
 8002038:	4618      	mov	r0, r3
 800203a:	3728      	adds	r7, #40	; 0x28
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	00010004 	.word	0x00010004

08002044 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af02      	add	r7, sp, #8
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	460b      	mov	r3, r1
 8002052:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002058:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b08      	cmp	r3, #8
 800205e:	d006      	beq.n	800206e <I2C_MasterRequestWrite+0x2a>
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d003      	beq.n	800206e <I2C_MasterRequestWrite+0x2a>
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800206c:	d108      	bne.n	8002080 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	e00b      	b.n	8002098 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	2b12      	cmp	r3, #18
 8002086:	d107      	bne.n	8002098 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002096:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f000 f91d 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00d      	beq.n	80020cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020be:	d103      	bne.n	80020c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e035      	b.n	8002138 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020d4:	d108      	bne.n	80020e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020d6:	897b      	ldrh	r3, [r7, #10]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	461a      	mov	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020e4:	611a      	str	r2, [r3, #16]
 80020e6:	e01b      	b.n	8002120 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020e8:	897b      	ldrh	r3, [r7, #10]
 80020ea:	11db      	asrs	r3, r3, #7
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	f003 0306 	and.w	r3, r3, #6
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	f063 030f 	orn	r3, r3, #15
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	490e      	ldr	r1, [pc, #56]	; (8002140 <I2C_MasterRequestWrite+0xfc>)
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f966 	bl	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e010      	b.n	8002138 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002116:	897b      	ldrh	r3, [r7, #10]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	4907      	ldr	r1, [pc, #28]	; (8002144 <I2C_MasterRequestWrite+0x100>)
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 f956 	bl	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	00010008 	.word	0x00010008
 8002144:	00010002 	.word	0x00010002

08002148 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af02      	add	r7, sp, #8
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	460b      	mov	r3, r1
 8002156:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800216c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b08      	cmp	r3, #8
 8002172:	d006      	beq.n	8002182 <I2C_MasterRequestRead+0x3a>
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d003      	beq.n	8002182 <I2C_MasterRequestRead+0x3a>
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002180:	d108      	bne.n	8002194 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e00b      	b.n	80021ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	2b11      	cmp	r3, #17
 800219a:	d107      	bne.n	80021ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f893 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00d      	beq.n	80021e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d2:	d103      	bne.n	80021dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e079      	b.n	80022d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021e8:	d108      	bne.n	80021fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021ea:	897b      	ldrh	r3, [r7, #10]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	611a      	str	r2, [r3, #16]
 80021fa:	e05f      	b.n	80022bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021fc:	897b      	ldrh	r3, [r7, #10]
 80021fe:	11db      	asrs	r3, r3, #7
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f003 0306 	and.w	r3, r3, #6
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f063 030f 	orn	r3, r3, #15
 800220c:	b2da      	uxtb	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4930      	ldr	r1, [pc, #192]	; (80022dc <I2C_MasterRequestRead+0x194>)
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f8dc 	bl	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e054      	b.n	80022d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800222a:	897b      	ldrh	r3, [r7, #10]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	4929      	ldr	r1, [pc, #164]	; (80022e0 <I2C_MasterRequestRead+0x198>)
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f8cc 	bl	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e044      	b.n	80022d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800226e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f831 	bl	80022e4 <I2C_WaitOnFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00d      	beq.n	80022a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002296:	d103      	bne.n	80022a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e017      	b.n	80022d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80022a4:	897b      	ldrh	r3, [r7, #10]
 80022a6:	11db      	asrs	r3, r3, #7
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f003 0306 	and.w	r3, r3, #6
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f063 030e 	orn	r3, r3, #14
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	4907      	ldr	r1, [pc, #28]	; (80022e0 <I2C_MasterRequestRead+0x198>)
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f888 	bl	80023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	00010008 	.word	0x00010008
 80022e0:	00010002 	.word	0x00010002

080022e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	4613      	mov	r3, r2
 80022f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022f4:	e048      	b.n	8002388 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d044      	beq.n	8002388 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022fe:	f7fe ff69 	bl	80011d4 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d302      	bcc.n	8002314 <I2C_WaitOnFlagUntilTimeout+0x30>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d139      	bne.n	8002388 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	0c1b      	lsrs	r3, r3, #16
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d10d      	bne.n	800233a <I2C_WaitOnFlagUntilTimeout+0x56>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	43da      	mvns	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	4013      	ands	r3, r2
 800232a:	b29b      	uxth	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	e00c      	b.n	8002354 <I2C_WaitOnFlagUntilTimeout+0x70>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	43da      	mvns	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	4013      	ands	r3, r2
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf0c      	ite	eq
 800234c:	2301      	moveq	r3, #1
 800234e:	2300      	movne	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	429a      	cmp	r2, r3
 8002358:	d116      	bne.n	8002388 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f043 0220 	orr.w	r2, r3, #32
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e023      	b.n	80023d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	0c1b      	lsrs	r3, r3, #16
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b01      	cmp	r3, #1
 8002390:	d10d      	bne.n	80023ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	43da      	mvns	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	4013      	ands	r3, r2
 800239e:	b29b      	uxth	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	e00c      	b.n	80023c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	43da      	mvns	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4013      	ands	r3, r2
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf0c      	ite	eq
 80023c0:	2301      	moveq	r3, #1
 80023c2:	2300      	movne	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d093      	beq.n	80022f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023e6:	e071      	b.n	80024cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f6:	d123      	bne.n	8002440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002406:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002410:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	f043 0204 	orr.w	r2, r3, #4
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e067      	b.n	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002446:	d041      	beq.n	80024cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002448:	f7fe fec4 	bl	80011d4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	d302      	bcc.n	800245e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d136      	bne.n	80024cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d10c      	bne.n	8002482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	43da      	mvns	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4013      	ands	r3, r2
 8002474:	b29b      	uxth	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf14      	ite	ne
 800247a:	2301      	movne	r3, #1
 800247c:	2300      	moveq	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	e00b      	b.n	800249a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	43da      	mvns	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	4013      	ands	r3, r2
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf14      	ite	ne
 8002494:	2301      	movne	r3, #1
 8002496:	2300      	moveq	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d016      	beq.n	80024cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f043 0220 	orr.w	r2, r3, #32
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e021      	b.n	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	0c1b      	lsrs	r3, r3, #16
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d10c      	bne.n	80024f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	43da      	mvns	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4013      	ands	r3, r2
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf14      	ite	ne
 80024e8:	2301      	movne	r3, #1
 80024ea:	2300      	moveq	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	e00b      	b.n	8002508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	43da      	mvns	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4013      	ands	r3, r2
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	bf14      	ite	ne
 8002502:	2301      	movne	r3, #1
 8002504:	2300      	moveq	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	f47f af6d 	bne.w	80023e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002524:	e034      	b.n	8002590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f8e3 	bl	80026f2 <I2C_IsAcknowledgeFailed>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e034      	b.n	80025a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d028      	beq.n	8002590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253e:	f7fe fe49 	bl	80011d4 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	429a      	cmp	r2, r3
 800254c:	d302      	bcc.n	8002554 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d11d      	bne.n	8002590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	2b80      	cmp	r3, #128	; 0x80
 8002560:	d016      	beq.n	8002590 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f043 0220 	orr.w	r2, r3, #32
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e007      	b.n	80025a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259a:	2b80      	cmp	r3, #128	; 0x80
 800259c:	d1c3      	bne.n	8002526 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80025b4:	e034      	b.n	8002620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f89b 	bl	80026f2 <I2C_IsAcknowledgeFailed>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e034      	b.n	8002630 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d028      	beq.n	8002620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ce:	f7fe fe01 	bl	80011d4 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	68ba      	ldr	r2, [r7, #8]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d302      	bcc.n	80025e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d11d      	bne.n	8002620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d016      	beq.n	8002620 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	f043 0220 	orr.w	r2, r3, #32
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e007      	b.n	8002630 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b04      	cmp	r3, #4
 800262c:	d1c3      	bne.n	80025b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002644:	e049      	b.n	80026da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b10      	cmp	r3, #16
 8002652:	d119      	bne.n	8002688 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f06f 0210 	mvn.w	r2, #16
 800265c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e030      	b.n	80026ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002688:	f7fe fda4 	bl	80011d4 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	429a      	cmp	r2, r3
 8002696:	d302      	bcc.n	800269e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d11d      	bne.n	80026da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d016      	beq.n	80026da <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f043 0220 	orr.w	r2, r3, #32
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e007      	b.n	80026ea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b40      	cmp	r3, #64	; 0x40
 80026e6:	d1ae      	bne.n	8002646 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002708:	d11b      	bne.n	8002742 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002712:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f043 0204 	orr.w	r2, r3, #4
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e000      	b.n	8002744 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0cc      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002764:	4b68      	ldr	r3, [pc, #416]	; (8002908 <HAL_RCC_ClockConfig+0x1b8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d90c      	bls.n	800278c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b65      	ldr	r3, [pc, #404]	; (8002908 <HAL_RCC_ClockConfig+0x1b8>)
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277a:	4b63      	ldr	r3, [pc, #396]	; (8002908 <HAL_RCC_ClockConfig+0x1b8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0b8      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027a4:	4b59      	ldr	r3, [pc, #356]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	4a58      	ldr	r2, [pc, #352]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027bc:	4b53      	ldr	r3, [pc, #332]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4a52      	ldr	r2, [pc, #328]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c8:	4b50      	ldr	r3, [pc, #320]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	494d      	ldr	r1, [pc, #308]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d044      	beq.n	8002870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d107      	bne.n	80027fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ee:	4b47      	ldr	r3, [pc, #284]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d119      	bne.n	800282e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e07f      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b02      	cmp	r3, #2
 8002804:	d003      	beq.n	800280e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800280a:	2b03      	cmp	r3, #3
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280e:	4b3f      	ldr	r3, [pc, #252]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e06f      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281e:	4b3b      	ldr	r3, [pc, #236]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e067      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282e:	4b37      	ldr	r3, [pc, #220]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f023 0203 	bic.w	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4934      	ldr	r1, [pc, #208]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	4313      	orrs	r3, r2
 800283e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002840:	f7fe fcc8 	bl	80011d4 <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	e00a      	b.n	800285e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002848:	f7fe fcc4 	bl	80011d4 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	; 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d901      	bls.n	800285e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e04f      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	4b2b      	ldr	r3, [pc, #172]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f003 020c 	and.w	r2, r3, #12
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	429a      	cmp	r2, r3
 800286e:	d1eb      	bne.n	8002848 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002870:	4b25      	ldr	r3, [pc, #148]	; (8002908 <HAL_RCC_ClockConfig+0x1b8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d20c      	bcs.n	8002898 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b22      	ldr	r3, [pc, #136]	; (8002908 <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002886:	4b20      	ldr	r3, [pc, #128]	; (8002908 <HAL_RCC_ClockConfig+0x1b8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e032      	b.n	80028fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d008      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4916      	ldr	r1, [pc, #88]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028c2:	4b12      	ldr	r3, [pc, #72]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	490e      	ldr	r1, [pc, #56]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028d6:	f000 f855 	bl	8002984 <HAL_RCC_GetSysClockFreq>
 80028da:	4602      	mov	r2, r0
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	490a      	ldr	r1, [pc, #40]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	5ccb      	ldrb	r3, [r1, r3]
 80028ea:	fa22 f303 	lsr.w	r3, r2, r3
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028f2:	4b09      	ldr	r3, [pc, #36]	; (8002918 <HAL_RCC_ClockConfig+0x1c8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe fc28 	bl	800114c <HAL_InitTick>

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40023c00 	.word	0x40023c00
 800290c:	40023800 	.word	0x40023800
 8002910:	08004538 	.word	0x08004538
 8002914:	20000000 	.word	0x20000000
 8002918:	20000004 	.word	0x20000004

0800291c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_RCC_GetHCLKFreq+0x14>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	20000000 	.word	0x20000000

08002934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002938:	f7ff fff0 	bl	800291c <HAL_RCC_GetHCLKFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	0a9b      	lsrs	r3, r3, #10
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	4903      	ldr	r1, [pc, #12]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002950:	4618      	mov	r0, r3
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40023800 	.word	0x40023800
 8002958:	08004548 	.word	0x08004548

0800295c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002960:	f7ff ffdc 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	0b5b      	lsrs	r3, r3, #13
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	4903      	ldr	r1, [pc, #12]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002978:	4618      	mov	r0, r3
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40023800 	.word	0x40023800
 8002980:	08004548 	.word	0x08004548

08002984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002988:	b0ae      	sub	sp, #184	; 0xb8
 800298a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029aa:	4bcb      	ldr	r3, [pc, #812]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b0c      	cmp	r3, #12
 80029b4:	f200 8206 	bhi.w	8002dc4 <HAL_RCC_GetSysClockFreq+0x440>
 80029b8:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	080029f5 	.word	0x080029f5
 80029c4:	08002dc5 	.word	0x08002dc5
 80029c8:	08002dc5 	.word	0x08002dc5
 80029cc:	08002dc5 	.word	0x08002dc5
 80029d0:	080029fd 	.word	0x080029fd
 80029d4:	08002dc5 	.word	0x08002dc5
 80029d8:	08002dc5 	.word	0x08002dc5
 80029dc:	08002dc5 	.word	0x08002dc5
 80029e0:	08002a05 	.word	0x08002a05
 80029e4:	08002dc5 	.word	0x08002dc5
 80029e8:	08002dc5 	.word	0x08002dc5
 80029ec:	08002dc5 	.word	0x08002dc5
 80029f0:	08002bf5 	.word	0x08002bf5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029f4:	4bb9      	ldr	r3, [pc, #740]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x358>)
 80029f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80029fa:	e1e7      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029fc:	4bb8      	ldr	r3, [pc, #736]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80029fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a02:	e1e3      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a04:	4bb4      	ldr	r3, [pc, #720]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a10:	4bb1      	ldr	r3, [pc, #708]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d071      	beq.n	8002b00 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1c:	4bae      	ldr	r3, [pc, #696]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	2200      	movs	r2, #0
 8002a24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a28:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a42:	4622      	mov	r2, r4
 8002a44:	462b      	mov	r3, r5
 8002a46:	f04f 0000 	mov.w	r0, #0
 8002a4a:	f04f 0100 	mov.w	r1, #0
 8002a4e:	0159      	lsls	r1, r3, #5
 8002a50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a54:	0150      	lsls	r0, r2, #5
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	1a51      	subs	r1, r2, r1
 8002a5e:	6439      	str	r1, [r7, #64]	; 0x40
 8002a60:	4629      	mov	r1, r5
 8002a62:	eb63 0301 	sbc.w	r3, r3, r1
 8002a66:	647b      	str	r3, [r7, #68]	; 0x44
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002a74:	4649      	mov	r1, r9
 8002a76:	018b      	lsls	r3, r1, #6
 8002a78:	4641      	mov	r1, r8
 8002a7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a7e:	4641      	mov	r1, r8
 8002a80:	018a      	lsls	r2, r1, #6
 8002a82:	4641      	mov	r1, r8
 8002a84:	1a51      	subs	r1, r2, r1
 8002a86:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a88:	4649      	mov	r1, r9
 8002a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002a9c:	4649      	mov	r1, r9
 8002a9e:	00cb      	lsls	r3, r1, #3
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aa6:	4641      	mov	r1, r8
 8002aa8:	00ca      	lsls	r2, r1, #3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	4603      	mov	r3, r0
 8002ab0:	4622      	mov	r2, r4
 8002ab2:	189b      	adds	r3, r3, r2
 8002ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ab6:	462b      	mov	r3, r5
 8002ab8:	460a      	mov	r2, r1
 8002aba:	eb42 0303 	adc.w	r3, r2, r3
 8002abe:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002acc:	4629      	mov	r1, r5
 8002ace:	024b      	lsls	r3, r1, #9
 8002ad0:	4621      	mov	r1, r4
 8002ad2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	024a      	lsls	r2, r1, #9
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ae8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002aec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002af0:	f7fd fbe6 	bl	80002c0 <__aeabi_uldivmod>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4613      	mov	r3, r2
 8002afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002afe:	e067      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b00:	4b75      	ldr	r3, [pc, #468]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	099b      	lsrs	r3, r3, #6
 8002b06:	2200      	movs	r2, #0
 8002b08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b0c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b18:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b1e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002b22:	4622      	mov	r2, r4
 8002b24:	462b      	mov	r3, r5
 8002b26:	f04f 0000 	mov.w	r0, #0
 8002b2a:	f04f 0100 	mov.w	r1, #0
 8002b2e:	0159      	lsls	r1, r3, #5
 8002b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b34:	0150      	lsls	r0, r2, #5
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	1a51      	subs	r1, r2, r1
 8002b3e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002b40:	4629      	mov	r1, r5
 8002b42:	eb63 0301 	sbc.w	r3, r3, r1
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002b54:	4649      	mov	r1, r9
 8002b56:	018b      	lsls	r3, r1, #6
 8002b58:	4641      	mov	r1, r8
 8002b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b5e:	4641      	mov	r1, r8
 8002b60:	018a      	lsls	r2, r1, #6
 8002b62:	4641      	mov	r1, r8
 8002b64:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b68:	4649      	mov	r1, r9
 8002b6a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b82:	4692      	mov	sl, r2
 8002b84:	469b      	mov	fp, r3
 8002b86:	4623      	mov	r3, r4
 8002b88:	eb1a 0303 	adds.w	r3, sl, r3
 8002b8c:	623b      	str	r3, [r7, #32]
 8002b8e:	462b      	mov	r3, r5
 8002b90:	eb4b 0303 	adc.w	r3, fp, r3
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	028b      	lsls	r3, r1, #10
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bac:	4621      	mov	r1, r4
 8002bae:	028a      	lsls	r2, r1, #10
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bb8:	2200      	movs	r2, #0
 8002bba:	673b      	str	r3, [r7, #112]	; 0x70
 8002bbc:	677a      	str	r2, [r7, #116]	; 0x74
 8002bbe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002bc2:	f7fd fb7d 	bl	80002c0 <__aeabi_uldivmod>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4613      	mov	r3, r2
 8002bcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bd0:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	0c1b      	lsrs	r3, r3, #16
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002be2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002be6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bf2:	e0eb      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bf4:	4b38      	ldr	r3, [pc, #224]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d06b      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0c:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	2200      	movs	r2, #0
 8002c14:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c1e:	663b      	str	r3, [r7, #96]	; 0x60
 8002c20:	2300      	movs	r3, #0
 8002c22:	667b      	str	r3, [r7, #100]	; 0x64
 8002c24:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002c28:	4622      	mov	r2, r4
 8002c2a:	462b      	mov	r3, r5
 8002c2c:	f04f 0000 	mov.w	r0, #0
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	0159      	lsls	r1, r3, #5
 8002c36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c3a:	0150      	lsls	r0, r2, #5
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4621      	mov	r1, r4
 8002c42:	1a51      	subs	r1, r2, r1
 8002c44:	61b9      	str	r1, [r7, #24]
 8002c46:	4629      	mov	r1, r5
 8002c48:	eb63 0301 	sbc.w	r3, r3, r1
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c5a:	4659      	mov	r1, fp
 8002c5c:	018b      	lsls	r3, r1, #6
 8002c5e:	4651      	mov	r1, sl
 8002c60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c64:	4651      	mov	r1, sl
 8002c66:	018a      	lsls	r2, r1, #6
 8002c68:	4651      	mov	r1, sl
 8002c6a:	ebb2 0801 	subs.w	r8, r2, r1
 8002c6e:	4659      	mov	r1, fp
 8002c70:	eb63 0901 	sbc.w	r9, r3, r1
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c88:	4690      	mov	r8, r2
 8002c8a:	4699      	mov	r9, r3
 8002c8c:	4623      	mov	r3, r4
 8002c8e:	eb18 0303 	adds.w	r3, r8, r3
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	462b      	mov	r3, r5
 8002c96:	eb49 0303 	adc.w	r3, r9, r3
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ca8:	4629      	mov	r1, r5
 8002caa:	024b      	lsls	r3, r1, #9
 8002cac:	4621      	mov	r1, r4
 8002cae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	024a      	lsls	r2, r1, #9
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cc2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002cc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cc8:	f7fd fafa 	bl	80002c0 <__aeabi_uldivmod>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cd6:	e065      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x420>
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	00f42400 	.word	0x00f42400
 8002ce0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce4:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x458>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	2200      	movs	r2, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	4611      	mov	r1, r2
 8002cf0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cf4:	653b      	str	r3, [r7, #80]	; 0x50
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	657b      	str	r3, [r7, #84]	; 0x54
 8002cfa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002cfe:	4642      	mov	r2, r8
 8002d00:	464b      	mov	r3, r9
 8002d02:	f04f 0000 	mov.w	r0, #0
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	0159      	lsls	r1, r3, #5
 8002d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d10:	0150      	lsls	r0, r2, #5
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4641      	mov	r1, r8
 8002d18:	1a51      	subs	r1, r2, r1
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	4649      	mov	r1, r9
 8002d1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d30:	4659      	mov	r1, fp
 8002d32:	018b      	lsls	r3, r1, #6
 8002d34:	4651      	mov	r1, sl
 8002d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d3a:	4651      	mov	r1, sl
 8002d3c:	018a      	lsls	r2, r1, #6
 8002d3e:	4651      	mov	r1, sl
 8002d40:	1a54      	subs	r4, r2, r1
 8002d42:	4659      	mov	r1, fp
 8002d44:	eb63 0501 	sbc.w	r5, r3, r1
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	00eb      	lsls	r3, r5, #3
 8002d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d56:	00e2      	lsls	r2, r4, #3
 8002d58:	4614      	mov	r4, r2
 8002d5a:	461d      	mov	r5, r3
 8002d5c:	4643      	mov	r3, r8
 8002d5e:	18e3      	adds	r3, r4, r3
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	464b      	mov	r3, r9
 8002d64:	eb45 0303 	adc.w	r3, r5, r3
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d76:	4629      	mov	r1, r5
 8002d78:	028b      	lsls	r3, r1, #10
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d80:	4621      	mov	r1, r4
 8002d82:	028a      	lsls	r2, r1, #10
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d90:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002d92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d96:	f7fd fa93 	bl	80002c0 <__aeabi_uldivmod>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4613      	mov	r3, r2
 8002da0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002da4:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x458>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	0f1b      	lsrs	r3, r3, #28
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002db2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002db6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dc2:	e003      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002dc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	37b8      	adds	r7, #184	; 0xb8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	00f42400 	.word	0x00f42400

08002de4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e28d      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 8083 	beq.w	8002f0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e04:	4b94      	ldr	r3, [pc, #592]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d019      	beq.n	8002e44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e10:	4b91      	ldr	r3, [pc, #580]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e1c:	4b8e      	ldr	r3, [pc, #568]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e28:	d00c      	beq.n	8002e44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2a:	4b8b      	ldr	r3, [pc, #556]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e32:	2b0c      	cmp	r3, #12
 8002e34:	d112      	bne.n	8002e5c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e36:	4b88      	ldr	r3, [pc, #544]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e42:	d10b      	bne.n	8002e5c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e44:	4b84      	ldr	r3, [pc, #528]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d05b      	beq.n	8002f08 <HAL_RCC_OscConfig+0x124>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d157      	bne.n	8002f08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e25a      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e64:	d106      	bne.n	8002e74 <HAL_RCC_OscConfig+0x90>
 8002e66:	4b7c      	ldr	r3, [pc, #496]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7b      	ldr	r2, [pc, #492]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e01d      	b.n	8002eb0 <HAL_RCC_OscConfig+0xcc>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0xb4>
 8002e7e:	4b76      	ldr	r3, [pc, #472]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a75      	ldr	r2, [pc, #468]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b73      	ldr	r3, [pc, #460]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a72      	ldr	r2, [pc, #456]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCC_OscConfig+0xcc>
 8002e98:	4b6f      	ldr	r3, [pc, #444]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a6e      	ldr	r2, [pc, #440]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4b6c      	ldr	r3, [pc, #432]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a6b      	ldr	r2, [pc, #428]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d013      	beq.n	8002ee0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe f98c 	bl	80011d4 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7fe f988 	bl	80011d4 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e21f      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	4b61      	ldr	r3, [pc, #388]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0xdc>
 8002ede:	e014      	b.n	8002f0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe f978 	bl	80011d4 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7fe f974 	bl	80011d4 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e20b      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efa:	4b57      	ldr	r3, [pc, #348]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x104>
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d06f      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f16:	4b50      	ldr	r3, [pc, #320]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d017      	beq.n	8002f52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f22:	4b4d      	ldr	r3, [pc, #308]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d105      	bne.n	8002f3a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f2e:	4b4a      	ldr	r3, [pc, #296]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3a:	4b47      	ldr	r3, [pc, #284]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f42:	2b0c      	cmp	r3, #12
 8002f44:	d11c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f46:	4b44      	ldr	r3, [pc, #272]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d116      	bne.n	8002f80 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f52:	4b41      	ldr	r3, [pc, #260]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_RCC_OscConfig+0x186>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e1d3      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6a:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4937      	ldr	r1, [pc, #220]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7e:	e03a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f88:	4b34      	ldr	r3, [pc, #208]	; (800305c <HAL_RCC_OscConfig+0x278>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8e:	f7fe f921 	bl	80011d4 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f96:	f7fe f91d 	bl	80011d4 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e1b4      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb4:	4b28      	ldr	r3, [pc, #160]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4925      	ldr	r1, [pc, #148]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	600b      	str	r3, [r1, #0]
 8002fc8:	e015      	b.n	8002ff6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <HAL_RCC_OscConfig+0x278>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fe f900 	bl	80011d4 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd8:	f7fe f8fc 	bl	80011d4 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e193      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fea:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1f0      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d036      	beq.n	8003070 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d016      	beq.n	8003038 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300a:	4b15      	ldr	r3, [pc, #84]	; (8003060 <HAL_RCC_OscConfig+0x27c>)
 800300c:	2201      	movs	r2, #1
 800300e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003010:	f7fe f8e0 	bl	80011d4 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003018:	f7fe f8dc 	bl	80011d4 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e173      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_OscConfig+0x274>)
 800302c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x234>
 8003036:	e01b      	b.n	8003070 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003038:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_RCC_OscConfig+0x27c>)
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303e:	f7fe f8c9 	bl	80011d4 <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003044:	e00e      	b.n	8003064 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003046:	f7fe f8c5 	bl	80011d4 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d907      	bls.n	8003064 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e15c      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
 8003058:	40023800 	.word	0x40023800
 800305c:	42470000 	.word	0x42470000
 8003060:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003064:	4b8a      	ldr	r3, [pc, #552]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1ea      	bne.n	8003046 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8097 	beq.w	80031ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307e:	2300      	movs	r3, #0
 8003080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003082:	4b83      	ldr	r3, [pc, #524]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10f      	bne.n	80030ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	4b7f      	ldr	r3, [pc, #508]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	4a7e      	ldr	r2, [pc, #504]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309c:	6413      	str	r3, [r2, #64]	; 0x40
 800309e:	4b7c      	ldr	r3, [pc, #496]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a6:	60bb      	str	r3, [r7, #8]
 80030a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030aa:	2301      	movs	r3, #1
 80030ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ae:	4b79      	ldr	r3, [pc, #484]	; (8003294 <HAL_RCC_OscConfig+0x4b0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d118      	bne.n	80030ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ba:	4b76      	ldr	r3, [pc, #472]	; (8003294 <HAL_RCC_OscConfig+0x4b0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a75      	ldr	r2, [pc, #468]	; (8003294 <HAL_RCC_OscConfig+0x4b0>)
 80030c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c6:	f7fe f885 	bl	80011d4 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ce:	f7fe f881 	bl	80011d4 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e118      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e0:	4b6c      	ldr	r3, [pc, #432]	; (8003294 <HAL_RCC_OscConfig+0x4b0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d106      	bne.n	8003102 <HAL_RCC_OscConfig+0x31e>
 80030f4:	4b66      	ldr	r3, [pc, #408]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	4a65      	ldr	r2, [pc, #404]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 80030fa:	f043 0301 	orr.w	r3, r3, #1
 80030fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003100:	e01c      	b.n	800313c <HAL_RCC_OscConfig+0x358>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b05      	cmp	r3, #5
 8003108:	d10c      	bne.n	8003124 <HAL_RCC_OscConfig+0x340>
 800310a:	4b61      	ldr	r3, [pc, #388]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	4a60      	ldr	r2, [pc, #384]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003110:	f043 0304 	orr.w	r3, r3, #4
 8003114:	6713      	str	r3, [r2, #112]	; 0x70
 8003116:	4b5e      	ldr	r3, [pc, #376]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	4a5d      	ldr	r2, [pc, #372]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6713      	str	r3, [r2, #112]	; 0x70
 8003122:	e00b      	b.n	800313c <HAL_RCC_OscConfig+0x358>
 8003124:	4b5a      	ldr	r3, [pc, #360]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	4a59      	ldr	r2, [pc, #356]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 800312a:	f023 0301 	bic.w	r3, r3, #1
 800312e:	6713      	str	r3, [r2, #112]	; 0x70
 8003130:	4b57      	ldr	r3, [pc, #348]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003134:	4a56      	ldr	r2, [pc, #344]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003136:	f023 0304 	bic.w	r3, r3, #4
 800313a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d015      	beq.n	8003170 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003144:	f7fe f846 	bl	80011d4 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314a:	e00a      	b.n	8003162 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800314c:	f7fe f842 	bl	80011d4 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f241 3288 	movw	r2, #5000	; 0x1388
 800315a:	4293      	cmp	r3, r2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e0d7      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003162:	4b4b      	ldr	r3, [pc, #300]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0ee      	beq.n	800314c <HAL_RCC_OscConfig+0x368>
 800316e:	e014      	b.n	800319a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003170:	f7fe f830 	bl	80011d4 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003176:	e00a      	b.n	800318e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003178:	f7fe f82c 	bl	80011d4 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	f241 3288 	movw	r2, #5000	; 0x1388
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e0c1      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800318e:	4b40      	ldr	r3, [pc, #256]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1ee      	bne.n	8003178 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800319a:	7dfb      	ldrb	r3, [r7, #23]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d105      	bne.n	80031ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a0:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	4a3a      	ldr	r2, [pc, #232]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 80031a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80ad 	beq.w	8003310 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031b6:	4b36      	ldr	r3, [pc, #216]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d060      	beq.n	8003284 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d145      	bne.n	8003256 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ca:	4b33      	ldr	r3, [pc, #204]	; (8003298 <HAL_RCC_OscConfig+0x4b4>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d0:	f7fe f800 	bl	80011d4 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d8:	f7fd fffc 	bl	80011d4 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e093      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ea:	4b29      	ldr	r3, [pc, #164]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69da      	ldr	r2, [r3, #28]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	019b      	lsls	r3, r3, #6
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	3b01      	subs	r3, #1
 8003210:	041b      	lsls	r3, r3, #16
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	061b      	lsls	r3, r3, #24
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	071b      	lsls	r3, r3, #28
 8003222:	491b      	ldr	r1, [pc, #108]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003228:	4b1b      	ldr	r3, [pc, #108]	; (8003298 <HAL_RCC_OscConfig+0x4b4>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322e:	f7fd ffd1 	bl	80011d4 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003236:	f7fd ffcd 	bl	80011d4 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e064      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003248:	4b11      	ldr	r3, [pc, #68]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x452>
 8003254:	e05c      	b.n	8003310 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003256:	4b10      	ldr	r3, [pc, #64]	; (8003298 <HAL_RCC_OscConfig+0x4b4>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fd ffba 	bl	80011d4 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003264:	f7fd ffb6 	bl	80011d4 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e04d      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_RCC_OscConfig+0x4ac>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x480>
 8003282:	e045      	b.n	8003310 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d107      	bne.n	800329c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e040      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
 8003290:	40023800 	.word	0x40023800
 8003294:	40007000 	.word	0x40007000
 8003298:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800329c:	4b1f      	ldr	r3, [pc, #124]	; (800331c <HAL_RCC_OscConfig+0x538>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d030      	beq.n	800330c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d129      	bne.n	800330c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d122      	bne.n	800330c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032cc:	4013      	ands	r3, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d119      	bne.n	800330c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	3b01      	subs	r3, #1
 80032e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d10f      	bne.n	800330c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d107      	bne.n	800330c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40023800 	.word	0x40023800

08003320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e042      	b.n	80033b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fd fdc6 	bl	8000ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2224      	movs	r2, #36	; 0x24
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f973 	bl	8003650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d175      	bne.n	80034cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_UART_Transmit+0x2c>
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e06e      	b.n	80034ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2221      	movs	r2, #33	; 0x21
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033fe:	f7fd fee9 	bl	80011d4 <HAL_GetTick>
 8003402:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	88fa      	ldrh	r2, [r7, #6]
 800340e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003418:	d108      	bne.n	800342c <HAL_UART_Transmit+0x6c>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d104      	bne.n	800342c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	e003      	b.n	8003434 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003430:	2300      	movs	r3, #0
 8003432:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003434:	e02e      	b.n	8003494 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2200      	movs	r2, #0
 800343e:	2180      	movs	r1, #128	; 0x80
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f848 	bl	80034d6 <UART_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e03a      	b.n	80034ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10b      	bne.n	8003476 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800346c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	3302      	adds	r3, #2
 8003472:	61bb      	str	r3, [r7, #24]
 8003474:	e007      	b.n	8003486 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	781a      	ldrb	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	3301      	adds	r3, #1
 8003484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1cb      	bne.n	8003436 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2140      	movs	r1, #64	; 0x40
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f814 	bl	80034d6 <UART_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e006      	b.n	80034ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e000      	b.n	80034ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
  }
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e6:	e03b      	b.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ee:	d037      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f0:	f7fd fe70 	bl	80011d4 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	6a3a      	ldr	r2, [r7, #32]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d302      	bcc.n	8003506 <UART_WaitOnFlagUntilTimeout+0x30>
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e03a      	b.n	8003580 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d023      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b80      	cmp	r3, #128	; 0x80
 800351c:	d020      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b40      	cmp	r3, #64	; 0x40
 8003522:	d01d      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b08      	cmp	r3, #8
 8003530:	d116      	bne.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f81d 	bl	8003588 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2208      	movs	r2, #8
 8003552:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e00f      	b.n	8003580 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	429a      	cmp	r2, r3
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	429a      	cmp	r2, r3
 800357c:	d0b4      	beq.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b095      	sub	sp, #84	; 0x54
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	330c      	adds	r3, #12
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035b0:	643a      	str	r2, [r7, #64]	; 0x40
 80035b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e5      	bne.n	8003590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3314      	adds	r3, #20
 80035ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	e853 3f00 	ldrex	r3, [r3]
 80035d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	64bb      	str	r3, [r7, #72]	; 0x48
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3314      	adds	r3, #20
 80035e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e5      	bne.n	80035c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d119      	bne.n	8003634 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f023 0310 	bic.w	r3, r3, #16
 8003616:	647b      	str	r3, [r7, #68]	; 0x44
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003620:	61ba      	str	r2, [r7, #24]
 8003622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	6979      	ldr	r1, [r7, #20]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	613b      	str	r3, [r7, #16]
   return(result);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e5      	bne.n	8003600 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003642:	bf00      	nop
 8003644:	3754      	adds	r7, #84	; 0x54
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003654:	b0c0      	sub	sp, #256	; 0x100
 8003656:	af00      	add	r7, sp, #0
 8003658:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366c:	68d9      	ldr	r1, [r3, #12]
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	ea40 0301 	orr.w	r3, r0, r1
 8003678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800367a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	431a      	orrs	r2, r3
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	431a      	orrs	r2, r3
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036a8:	f021 010c 	bic.w	r1, r1, #12
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036b6:	430b      	orrs	r3, r1
 80036b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ca:	6999      	ldr	r1, [r3, #24]
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	ea40 0301 	orr.w	r3, r0, r1
 80036d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4b8f      	ldr	r3, [pc, #572]	; (800391c <UART_SetConfig+0x2cc>)
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d005      	beq.n	80036f0 <UART_SetConfig+0xa0>
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	4b8d      	ldr	r3, [pc, #564]	; (8003920 <UART_SetConfig+0x2d0>)
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d104      	bne.n	80036fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036f0:	f7ff f934 	bl	800295c <HAL_RCC_GetPCLK2Freq>
 80036f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036f8:	e003      	b.n	8003702 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036fa:	f7ff f91b 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 80036fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370c:	f040 810c 	bne.w	8003928 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003714:	2200      	movs	r2, #0
 8003716:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800371a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800371e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003722:	4622      	mov	r2, r4
 8003724:	462b      	mov	r3, r5
 8003726:	1891      	adds	r1, r2, r2
 8003728:	65b9      	str	r1, [r7, #88]	; 0x58
 800372a:	415b      	adcs	r3, r3
 800372c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800372e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003732:	4621      	mov	r1, r4
 8003734:	eb12 0801 	adds.w	r8, r2, r1
 8003738:	4629      	mov	r1, r5
 800373a:	eb43 0901 	adc.w	r9, r3, r1
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800374a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800374e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003752:	4690      	mov	r8, r2
 8003754:	4699      	mov	r9, r3
 8003756:	4623      	mov	r3, r4
 8003758:	eb18 0303 	adds.w	r3, r8, r3
 800375c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003760:	462b      	mov	r3, r5
 8003762:	eb49 0303 	adc.w	r3, r9, r3
 8003766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800376a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003776:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800377a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800377e:	460b      	mov	r3, r1
 8003780:	18db      	adds	r3, r3, r3
 8003782:	653b      	str	r3, [r7, #80]	; 0x50
 8003784:	4613      	mov	r3, r2
 8003786:	eb42 0303 	adc.w	r3, r2, r3
 800378a:	657b      	str	r3, [r7, #84]	; 0x54
 800378c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003790:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003794:	f7fc fd94 	bl	80002c0 <__aeabi_uldivmod>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4b61      	ldr	r3, [pc, #388]	; (8003924 <UART_SetConfig+0x2d4>)
 800379e:	fba3 2302 	umull	r2, r3, r3, r2
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	011c      	lsls	r4, r3, #4
 80037a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037b8:	4642      	mov	r2, r8
 80037ba:	464b      	mov	r3, r9
 80037bc:	1891      	adds	r1, r2, r2
 80037be:	64b9      	str	r1, [r7, #72]	; 0x48
 80037c0:	415b      	adcs	r3, r3
 80037c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037c8:	4641      	mov	r1, r8
 80037ca:	eb12 0a01 	adds.w	sl, r2, r1
 80037ce:	4649      	mov	r1, r9
 80037d0:	eb43 0b01 	adc.w	fp, r3, r1
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037e8:	4692      	mov	sl, r2
 80037ea:	469b      	mov	fp, r3
 80037ec:	4643      	mov	r3, r8
 80037ee:	eb1a 0303 	adds.w	r3, sl, r3
 80037f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037f6:	464b      	mov	r3, r9
 80037f8:	eb4b 0303 	adc.w	r3, fp, r3
 80037fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800380c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003810:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003814:	460b      	mov	r3, r1
 8003816:	18db      	adds	r3, r3, r3
 8003818:	643b      	str	r3, [r7, #64]	; 0x40
 800381a:	4613      	mov	r3, r2
 800381c:	eb42 0303 	adc.w	r3, r2, r3
 8003820:	647b      	str	r3, [r7, #68]	; 0x44
 8003822:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003826:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800382a:	f7fc fd49 	bl	80002c0 <__aeabi_uldivmod>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4611      	mov	r1, r2
 8003834:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <UART_SetConfig+0x2d4>)
 8003836:	fba3 2301 	umull	r2, r3, r3, r1
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2264      	movs	r2, #100	; 0x64
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	1acb      	subs	r3, r1, r3
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800384a:	4b36      	ldr	r3, [pc, #216]	; (8003924 <UART_SetConfig+0x2d4>)
 800384c:	fba3 2302 	umull	r2, r3, r3, r2
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003858:	441c      	add	r4, r3
 800385a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800385e:	2200      	movs	r2, #0
 8003860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003864:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003868:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800386c:	4642      	mov	r2, r8
 800386e:	464b      	mov	r3, r9
 8003870:	1891      	adds	r1, r2, r2
 8003872:	63b9      	str	r1, [r7, #56]	; 0x38
 8003874:	415b      	adcs	r3, r3
 8003876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003878:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800387c:	4641      	mov	r1, r8
 800387e:	1851      	adds	r1, r2, r1
 8003880:	6339      	str	r1, [r7, #48]	; 0x30
 8003882:	4649      	mov	r1, r9
 8003884:	414b      	adcs	r3, r1
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003894:	4659      	mov	r1, fp
 8003896:	00cb      	lsls	r3, r1, #3
 8003898:	4651      	mov	r1, sl
 800389a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800389e:	4651      	mov	r1, sl
 80038a0:	00ca      	lsls	r2, r1, #3
 80038a2:	4610      	mov	r0, r2
 80038a4:	4619      	mov	r1, r3
 80038a6:	4603      	mov	r3, r0
 80038a8:	4642      	mov	r2, r8
 80038aa:	189b      	adds	r3, r3, r2
 80038ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038b0:	464b      	mov	r3, r9
 80038b2:	460a      	mov	r2, r1
 80038b4:	eb42 0303 	adc.w	r3, r2, r3
 80038b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038d0:	460b      	mov	r3, r1
 80038d2:	18db      	adds	r3, r3, r3
 80038d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d6:	4613      	mov	r3, r2
 80038d8:	eb42 0303 	adc.w	r3, r2, r3
 80038dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80038e6:	f7fc fceb 	bl	80002c0 <__aeabi_uldivmod>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <UART_SetConfig+0x2d4>)
 80038f0:	fba3 1302 	umull	r1, r3, r3, r2
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	2164      	movs	r1, #100	; 0x64
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	3332      	adds	r3, #50	; 0x32
 8003902:	4a08      	ldr	r2, [pc, #32]	; (8003924 <UART_SetConfig+0x2d4>)
 8003904:	fba2 2303 	umull	r2, r3, r2, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	f003 0207 	and.w	r2, r3, #7
 800390e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4422      	add	r2, r4
 8003916:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003918:	e106      	b.n	8003b28 <UART_SetConfig+0x4d8>
 800391a:	bf00      	nop
 800391c:	40011000 	.word	0x40011000
 8003920:	40011400 	.word	0x40011400
 8003924:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800392c:	2200      	movs	r2, #0
 800392e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003932:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003936:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800393a:	4642      	mov	r2, r8
 800393c:	464b      	mov	r3, r9
 800393e:	1891      	adds	r1, r2, r2
 8003940:	6239      	str	r1, [r7, #32]
 8003942:	415b      	adcs	r3, r3
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
 8003946:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800394a:	4641      	mov	r1, r8
 800394c:	1854      	adds	r4, r2, r1
 800394e:	4649      	mov	r1, r9
 8003950:	eb43 0501 	adc.w	r5, r3, r1
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	00eb      	lsls	r3, r5, #3
 800395e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003962:	00e2      	lsls	r2, r4, #3
 8003964:	4614      	mov	r4, r2
 8003966:	461d      	mov	r5, r3
 8003968:	4643      	mov	r3, r8
 800396a:	18e3      	adds	r3, r4, r3
 800396c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003970:	464b      	mov	r3, r9
 8003972:	eb45 0303 	adc.w	r3, r5, r3
 8003976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800397a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003986:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003996:	4629      	mov	r1, r5
 8003998:	008b      	lsls	r3, r1, #2
 800399a:	4621      	mov	r1, r4
 800399c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039a0:	4621      	mov	r1, r4
 80039a2:	008a      	lsls	r2, r1, #2
 80039a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039a8:	f7fc fc8a 	bl	80002c0 <__aeabi_uldivmod>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4b60      	ldr	r3, [pc, #384]	; (8003b34 <UART_SetConfig+0x4e4>)
 80039b2:	fba3 2302 	umull	r2, r3, r3, r2
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	011c      	lsls	r4, r3, #4
 80039ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039be:	2200      	movs	r2, #0
 80039c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039cc:	4642      	mov	r2, r8
 80039ce:	464b      	mov	r3, r9
 80039d0:	1891      	adds	r1, r2, r2
 80039d2:	61b9      	str	r1, [r7, #24]
 80039d4:	415b      	adcs	r3, r3
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039dc:	4641      	mov	r1, r8
 80039de:	1851      	adds	r1, r2, r1
 80039e0:	6139      	str	r1, [r7, #16]
 80039e2:	4649      	mov	r1, r9
 80039e4:	414b      	adcs	r3, r1
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039f4:	4659      	mov	r1, fp
 80039f6:	00cb      	lsls	r3, r1, #3
 80039f8:	4651      	mov	r1, sl
 80039fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039fe:	4651      	mov	r1, sl
 8003a00:	00ca      	lsls	r2, r1, #3
 8003a02:	4610      	mov	r0, r2
 8003a04:	4619      	mov	r1, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	4642      	mov	r2, r8
 8003a0a:	189b      	adds	r3, r3, r2
 8003a0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a10:	464b      	mov	r3, r9
 8003a12:	460a      	mov	r2, r1
 8003a14:	eb42 0303 	adc.w	r3, r2, r3
 8003a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a34:	4649      	mov	r1, r9
 8003a36:	008b      	lsls	r3, r1, #2
 8003a38:	4641      	mov	r1, r8
 8003a3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a3e:	4641      	mov	r1, r8
 8003a40:	008a      	lsls	r2, r1, #2
 8003a42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a46:	f7fc fc3b 	bl	80002c0 <__aeabi_uldivmod>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4b38      	ldr	r3, [pc, #224]	; (8003b34 <UART_SetConfig+0x4e4>)
 8003a52:	fba3 2301 	umull	r2, r3, r3, r1
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2264      	movs	r2, #100	; 0x64
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	1acb      	subs	r3, r1, r3
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	3332      	adds	r3, #50	; 0x32
 8003a64:	4a33      	ldr	r2, [pc, #204]	; (8003b34 <UART_SetConfig+0x4e4>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a70:	441c      	add	r4, r3
 8003a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a76:	2200      	movs	r2, #0
 8003a78:	673b      	str	r3, [r7, #112]	; 0x70
 8003a7a:	677a      	str	r2, [r7, #116]	; 0x74
 8003a7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a80:	4642      	mov	r2, r8
 8003a82:	464b      	mov	r3, r9
 8003a84:	1891      	adds	r1, r2, r2
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	415b      	adcs	r3, r3
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a90:	4641      	mov	r1, r8
 8003a92:	1851      	adds	r1, r2, r1
 8003a94:	6039      	str	r1, [r7, #0]
 8003a96:	4649      	mov	r1, r9
 8003a98:	414b      	adcs	r3, r1
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003aa8:	4659      	mov	r1, fp
 8003aaa:	00cb      	lsls	r3, r1, #3
 8003aac:	4651      	mov	r1, sl
 8003aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ab2:	4651      	mov	r1, sl
 8003ab4:	00ca      	lsls	r2, r1, #3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4603      	mov	r3, r0
 8003abc:	4642      	mov	r2, r8
 8003abe:	189b      	adds	r3, r3, r2
 8003ac0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	460a      	mov	r2, r1
 8003ac6:	eb42 0303 	adc.w	r3, r2, r3
 8003aca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ad6:	667a      	str	r2, [r7, #100]	; 0x64
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	008b      	lsls	r3, r1, #2
 8003ae8:	4641      	mov	r1, r8
 8003aea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aee:	4641      	mov	r1, r8
 8003af0:	008a      	lsls	r2, r1, #2
 8003af2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003af6:	f7fc fbe3 	bl	80002c0 <__aeabi_uldivmod>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <UART_SetConfig+0x4e4>)
 8003b00:	fba3 1302 	umull	r1, r3, r3, r2
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	2164      	movs	r1, #100	; 0x64
 8003b08:	fb01 f303 	mul.w	r3, r1, r3
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	3332      	adds	r3, #50	; 0x32
 8003b12:	4a08      	ldr	r2, [pc, #32]	; (8003b34 <UART_SetConfig+0x4e4>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	f003 020f 	and.w	r2, r3, #15
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4422      	add	r2, r4
 8003b26:	609a      	str	r2, [r3, #8]
}
 8003b28:	bf00      	nop
 8003b2a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b34:	51eb851f 	.word	0x51eb851f

08003b38 <siprintf>:
 8003b38:	b40e      	push	{r1, r2, r3}
 8003b3a:	b500      	push	{lr}
 8003b3c:	b09c      	sub	sp, #112	; 0x70
 8003b3e:	ab1d      	add	r3, sp, #116	; 0x74
 8003b40:	9002      	str	r0, [sp, #8]
 8003b42:	9006      	str	r0, [sp, #24]
 8003b44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b48:	4809      	ldr	r0, [pc, #36]	; (8003b70 <siprintf+0x38>)
 8003b4a:	9107      	str	r1, [sp, #28]
 8003b4c:	9104      	str	r1, [sp, #16]
 8003b4e:	4909      	ldr	r1, [pc, #36]	; (8003b74 <siprintf+0x3c>)
 8003b50:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b54:	9105      	str	r1, [sp, #20]
 8003b56:	6800      	ldr	r0, [r0, #0]
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	a902      	add	r1, sp, #8
 8003b5c:	f000 f992 	bl	8003e84 <_svfiprintf_r>
 8003b60:	9b02      	ldr	r3, [sp, #8]
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	b01c      	add	sp, #112	; 0x70
 8003b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b6c:	b003      	add	sp, #12
 8003b6e:	4770      	bx	lr
 8003b70:	20000058 	.word	0x20000058
 8003b74:	ffff0208 	.word	0xffff0208

08003b78 <memset>:
 8003b78:	4402      	add	r2, r0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d100      	bne.n	8003b82 <memset+0xa>
 8003b80:	4770      	bx	lr
 8003b82:	f803 1b01 	strb.w	r1, [r3], #1
 8003b86:	e7f9      	b.n	8003b7c <memset+0x4>

08003b88 <__errno>:
 8003b88:	4b01      	ldr	r3, [pc, #4]	; (8003b90 <__errno+0x8>)
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20000058 	.word	0x20000058

08003b94 <__libc_init_array>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	4d0d      	ldr	r5, [pc, #52]	; (8003bcc <__libc_init_array+0x38>)
 8003b98:	4c0d      	ldr	r4, [pc, #52]	; (8003bd0 <__libc_init_array+0x3c>)
 8003b9a:	1b64      	subs	r4, r4, r5
 8003b9c:	10a4      	asrs	r4, r4, #2
 8003b9e:	2600      	movs	r6, #0
 8003ba0:	42a6      	cmp	r6, r4
 8003ba2:	d109      	bne.n	8003bb8 <__libc_init_array+0x24>
 8003ba4:	4d0b      	ldr	r5, [pc, #44]	; (8003bd4 <__libc_init_array+0x40>)
 8003ba6:	4c0c      	ldr	r4, [pc, #48]	; (8003bd8 <__libc_init_array+0x44>)
 8003ba8:	f000 fc6a 	bl	8004480 <_init>
 8003bac:	1b64      	subs	r4, r4, r5
 8003bae:	10a4      	asrs	r4, r4, #2
 8003bb0:	2600      	movs	r6, #0
 8003bb2:	42a6      	cmp	r6, r4
 8003bb4:	d105      	bne.n	8003bc2 <__libc_init_array+0x2e>
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
 8003bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bbc:	4798      	blx	r3
 8003bbe:	3601      	adds	r6, #1
 8003bc0:	e7ee      	b.n	8003ba0 <__libc_init_array+0xc>
 8003bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc6:	4798      	blx	r3
 8003bc8:	3601      	adds	r6, #1
 8003bca:	e7f2      	b.n	8003bb2 <__libc_init_array+0x1e>
 8003bcc:	0800458c 	.word	0x0800458c
 8003bd0:	0800458c 	.word	0x0800458c
 8003bd4:	0800458c 	.word	0x0800458c
 8003bd8:	08004590 	.word	0x08004590

08003bdc <__retarget_lock_acquire_recursive>:
 8003bdc:	4770      	bx	lr

08003bde <__retarget_lock_release_recursive>:
 8003bde:	4770      	bx	lr

08003be0 <_free_r>:
 8003be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003be2:	2900      	cmp	r1, #0
 8003be4:	d044      	beq.n	8003c70 <_free_r+0x90>
 8003be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bea:	9001      	str	r0, [sp, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f1a1 0404 	sub.w	r4, r1, #4
 8003bf2:	bfb8      	it	lt
 8003bf4:	18e4      	addlt	r4, r4, r3
 8003bf6:	f000 f8df 	bl	8003db8 <__malloc_lock>
 8003bfa:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <_free_r+0x94>)
 8003bfc:	9801      	ldr	r0, [sp, #4]
 8003bfe:	6813      	ldr	r3, [r2, #0]
 8003c00:	b933      	cbnz	r3, 8003c10 <_free_r+0x30>
 8003c02:	6063      	str	r3, [r4, #4]
 8003c04:	6014      	str	r4, [r2, #0]
 8003c06:	b003      	add	sp, #12
 8003c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c0c:	f000 b8da 	b.w	8003dc4 <__malloc_unlock>
 8003c10:	42a3      	cmp	r3, r4
 8003c12:	d908      	bls.n	8003c26 <_free_r+0x46>
 8003c14:	6825      	ldr	r5, [r4, #0]
 8003c16:	1961      	adds	r1, r4, r5
 8003c18:	428b      	cmp	r3, r1
 8003c1a:	bf01      	itttt	eq
 8003c1c:	6819      	ldreq	r1, [r3, #0]
 8003c1e:	685b      	ldreq	r3, [r3, #4]
 8003c20:	1949      	addeq	r1, r1, r5
 8003c22:	6021      	streq	r1, [r4, #0]
 8003c24:	e7ed      	b.n	8003c02 <_free_r+0x22>
 8003c26:	461a      	mov	r2, r3
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	b10b      	cbz	r3, 8003c30 <_free_r+0x50>
 8003c2c:	42a3      	cmp	r3, r4
 8003c2e:	d9fa      	bls.n	8003c26 <_free_r+0x46>
 8003c30:	6811      	ldr	r1, [r2, #0]
 8003c32:	1855      	adds	r5, r2, r1
 8003c34:	42a5      	cmp	r5, r4
 8003c36:	d10b      	bne.n	8003c50 <_free_r+0x70>
 8003c38:	6824      	ldr	r4, [r4, #0]
 8003c3a:	4421      	add	r1, r4
 8003c3c:	1854      	adds	r4, r2, r1
 8003c3e:	42a3      	cmp	r3, r4
 8003c40:	6011      	str	r1, [r2, #0]
 8003c42:	d1e0      	bne.n	8003c06 <_free_r+0x26>
 8003c44:	681c      	ldr	r4, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	6053      	str	r3, [r2, #4]
 8003c4a:	440c      	add	r4, r1
 8003c4c:	6014      	str	r4, [r2, #0]
 8003c4e:	e7da      	b.n	8003c06 <_free_r+0x26>
 8003c50:	d902      	bls.n	8003c58 <_free_r+0x78>
 8003c52:	230c      	movs	r3, #12
 8003c54:	6003      	str	r3, [r0, #0]
 8003c56:	e7d6      	b.n	8003c06 <_free_r+0x26>
 8003c58:	6825      	ldr	r5, [r4, #0]
 8003c5a:	1961      	adds	r1, r4, r5
 8003c5c:	428b      	cmp	r3, r1
 8003c5e:	bf04      	itt	eq
 8003c60:	6819      	ldreq	r1, [r3, #0]
 8003c62:	685b      	ldreq	r3, [r3, #4]
 8003c64:	6063      	str	r3, [r4, #4]
 8003c66:	bf04      	itt	eq
 8003c68:	1949      	addeq	r1, r1, r5
 8003c6a:	6021      	streq	r1, [r4, #0]
 8003c6c:	6054      	str	r4, [r2, #4]
 8003c6e:	e7ca      	b.n	8003c06 <_free_r+0x26>
 8003c70:	b003      	add	sp, #12
 8003c72:	bd30      	pop	{r4, r5, pc}
 8003c74:	200002a8 	.word	0x200002a8

08003c78 <sbrk_aligned>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	4e0e      	ldr	r6, [pc, #56]	; (8003cb4 <sbrk_aligned+0x3c>)
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	6831      	ldr	r1, [r6, #0]
 8003c80:	4605      	mov	r5, r0
 8003c82:	b911      	cbnz	r1, 8003c8a <sbrk_aligned+0x12>
 8003c84:	f000 fba6 	bl	80043d4 <_sbrk_r>
 8003c88:	6030      	str	r0, [r6, #0]
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	f000 fba1 	bl	80043d4 <_sbrk_r>
 8003c92:	1c43      	adds	r3, r0, #1
 8003c94:	d00a      	beq.n	8003cac <sbrk_aligned+0x34>
 8003c96:	1cc4      	adds	r4, r0, #3
 8003c98:	f024 0403 	bic.w	r4, r4, #3
 8003c9c:	42a0      	cmp	r0, r4
 8003c9e:	d007      	beq.n	8003cb0 <sbrk_aligned+0x38>
 8003ca0:	1a21      	subs	r1, r4, r0
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f000 fb96 	bl	80043d4 <_sbrk_r>
 8003ca8:	3001      	adds	r0, #1
 8003caa:	d101      	bne.n	8003cb0 <sbrk_aligned+0x38>
 8003cac:	f04f 34ff 	mov.w	r4, #4294967295
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}
 8003cb4:	200002ac 	.word	0x200002ac

08003cb8 <_malloc_r>:
 8003cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cbc:	1ccd      	adds	r5, r1, #3
 8003cbe:	f025 0503 	bic.w	r5, r5, #3
 8003cc2:	3508      	adds	r5, #8
 8003cc4:	2d0c      	cmp	r5, #12
 8003cc6:	bf38      	it	cc
 8003cc8:	250c      	movcc	r5, #12
 8003cca:	2d00      	cmp	r5, #0
 8003ccc:	4607      	mov	r7, r0
 8003cce:	db01      	blt.n	8003cd4 <_malloc_r+0x1c>
 8003cd0:	42a9      	cmp	r1, r5
 8003cd2:	d905      	bls.n	8003ce0 <_malloc_r+0x28>
 8003cd4:	230c      	movs	r3, #12
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	2600      	movs	r6, #0
 8003cda:	4630      	mov	r0, r6
 8003cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ce0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003db4 <_malloc_r+0xfc>
 8003ce4:	f000 f868 	bl	8003db8 <__malloc_lock>
 8003ce8:	f8d8 3000 	ldr.w	r3, [r8]
 8003cec:	461c      	mov	r4, r3
 8003cee:	bb5c      	cbnz	r4, 8003d48 <_malloc_r+0x90>
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	4638      	mov	r0, r7
 8003cf4:	f7ff ffc0 	bl	8003c78 <sbrk_aligned>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	d155      	bne.n	8003daa <_malloc_r+0xf2>
 8003cfe:	f8d8 4000 	ldr.w	r4, [r8]
 8003d02:	4626      	mov	r6, r4
 8003d04:	2e00      	cmp	r6, #0
 8003d06:	d145      	bne.n	8003d94 <_malloc_r+0xdc>
 8003d08:	2c00      	cmp	r4, #0
 8003d0a:	d048      	beq.n	8003d9e <_malloc_r+0xe6>
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	4631      	mov	r1, r6
 8003d10:	4638      	mov	r0, r7
 8003d12:	eb04 0903 	add.w	r9, r4, r3
 8003d16:	f000 fb5d 	bl	80043d4 <_sbrk_r>
 8003d1a:	4581      	cmp	r9, r0
 8003d1c:	d13f      	bne.n	8003d9e <_malloc_r+0xe6>
 8003d1e:	6821      	ldr	r1, [r4, #0]
 8003d20:	1a6d      	subs	r5, r5, r1
 8003d22:	4629      	mov	r1, r5
 8003d24:	4638      	mov	r0, r7
 8003d26:	f7ff ffa7 	bl	8003c78 <sbrk_aligned>
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d037      	beq.n	8003d9e <_malloc_r+0xe6>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	442b      	add	r3, r5
 8003d32:	6023      	str	r3, [r4, #0]
 8003d34:	f8d8 3000 	ldr.w	r3, [r8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d038      	beq.n	8003dae <_malloc_r+0xf6>
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	42a2      	cmp	r2, r4
 8003d40:	d12b      	bne.n	8003d9a <_malloc_r+0xe2>
 8003d42:	2200      	movs	r2, #0
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	e00f      	b.n	8003d68 <_malloc_r+0xb0>
 8003d48:	6822      	ldr	r2, [r4, #0]
 8003d4a:	1b52      	subs	r2, r2, r5
 8003d4c:	d41f      	bmi.n	8003d8e <_malloc_r+0xd6>
 8003d4e:	2a0b      	cmp	r2, #11
 8003d50:	d917      	bls.n	8003d82 <_malloc_r+0xca>
 8003d52:	1961      	adds	r1, r4, r5
 8003d54:	42a3      	cmp	r3, r4
 8003d56:	6025      	str	r5, [r4, #0]
 8003d58:	bf18      	it	ne
 8003d5a:	6059      	strne	r1, [r3, #4]
 8003d5c:	6863      	ldr	r3, [r4, #4]
 8003d5e:	bf08      	it	eq
 8003d60:	f8c8 1000 	streq.w	r1, [r8]
 8003d64:	5162      	str	r2, [r4, r5]
 8003d66:	604b      	str	r3, [r1, #4]
 8003d68:	4638      	mov	r0, r7
 8003d6a:	f104 060b 	add.w	r6, r4, #11
 8003d6e:	f000 f829 	bl	8003dc4 <__malloc_unlock>
 8003d72:	f026 0607 	bic.w	r6, r6, #7
 8003d76:	1d23      	adds	r3, r4, #4
 8003d78:	1af2      	subs	r2, r6, r3
 8003d7a:	d0ae      	beq.n	8003cda <_malloc_r+0x22>
 8003d7c:	1b9b      	subs	r3, r3, r6
 8003d7e:	50a3      	str	r3, [r4, r2]
 8003d80:	e7ab      	b.n	8003cda <_malloc_r+0x22>
 8003d82:	42a3      	cmp	r3, r4
 8003d84:	6862      	ldr	r2, [r4, #4]
 8003d86:	d1dd      	bne.n	8003d44 <_malloc_r+0x8c>
 8003d88:	f8c8 2000 	str.w	r2, [r8]
 8003d8c:	e7ec      	b.n	8003d68 <_malloc_r+0xb0>
 8003d8e:	4623      	mov	r3, r4
 8003d90:	6864      	ldr	r4, [r4, #4]
 8003d92:	e7ac      	b.n	8003cee <_malloc_r+0x36>
 8003d94:	4634      	mov	r4, r6
 8003d96:	6876      	ldr	r6, [r6, #4]
 8003d98:	e7b4      	b.n	8003d04 <_malloc_r+0x4c>
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	e7cc      	b.n	8003d38 <_malloc_r+0x80>
 8003d9e:	230c      	movs	r3, #12
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	4638      	mov	r0, r7
 8003da4:	f000 f80e 	bl	8003dc4 <__malloc_unlock>
 8003da8:	e797      	b.n	8003cda <_malloc_r+0x22>
 8003daa:	6025      	str	r5, [r4, #0]
 8003dac:	e7dc      	b.n	8003d68 <_malloc_r+0xb0>
 8003dae:	605b      	str	r3, [r3, #4]
 8003db0:	deff      	udf	#255	; 0xff
 8003db2:	bf00      	nop
 8003db4:	200002a8 	.word	0x200002a8

08003db8 <__malloc_lock>:
 8003db8:	4801      	ldr	r0, [pc, #4]	; (8003dc0 <__malloc_lock+0x8>)
 8003dba:	f7ff bf0f 	b.w	8003bdc <__retarget_lock_acquire_recursive>
 8003dbe:	bf00      	nop
 8003dc0:	200002a4 	.word	0x200002a4

08003dc4 <__malloc_unlock>:
 8003dc4:	4801      	ldr	r0, [pc, #4]	; (8003dcc <__malloc_unlock+0x8>)
 8003dc6:	f7ff bf0a 	b.w	8003bde <__retarget_lock_release_recursive>
 8003dca:	bf00      	nop
 8003dcc:	200002a4 	.word	0x200002a4

08003dd0 <__ssputs_r>:
 8003dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dd4:	688e      	ldr	r6, [r1, #8]
 8003dd6:	461f      	mov	r7, r3
 8003dd8:	42be      	cmp	r6, r7
 8003dda:	680b      	ldr	r3, [r1, #0]
 8003ddc:	4682      	mov	sl, r0
 8003dde:	460c      	mov	r4, r1
 8003de0:	4690      	mov	r8, r2
 8003de2:	d82c      	bhi.n	8003e3e <__ssputs_r+0x6e>
 8003de4:	898a      	ldrh	r2, [r1, #12]
 8003de6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dea:	d026      	beq.n	8003e3a <__ssputs_r+0x6a>
 8003dec:	6965      	ldr	r5, [r4, #20]
 8003dee:	6909      	ldr	r1, [r1, #16]
 8003df0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003df4:	eba3 0901 	sub.w	r9, r3, r1
 8003df8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dfc:	1c7b      	adds	r3, r7, #1
 8003dfe:	444b      	add	r3, r9
 8003e00:	106d      	asrs	r5, r5, #1
 8003e02:	429d      	cmp	r5, r3
 8003e04:	bf38      	it	cc
 8003e06:	461d      	movcc	r5, r3
 8003e08:	0553      	lsls	r3, r2, #21
 8003e0a:	d527      	bpl.n	8003e5c <__ssputs_r+0x8c>
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	f7ff ff53 	bl	8003cb8 <_malloc_r>
 8003e12:	4606      	mov	r6, r0
 8003e14:	b360      	cbz	r0, 8003e70 <__ssputs_r+0xa0>
 8003e16:	6921      	ldr	r1, [r4, #16]
 8003e18:	464a      	mov	r2, r9
 8003e1a:	f000 faeb 	bl	80043f4 <memcpy>
 8003e1e:	89a3      	ldrh	r3, [r4, #12]
 8003e20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e28:	81a3      	strh	r3, [r4, #12]
 8003e2a:	6126      	str	r6, [r4, #16]
 8003e2c:	6165      	str	r5, [r4, #20]
 8003e2e:	444e      	add	r6, r9
 8003e30:	eba5 0509 	sub.w	r5, r5, r9
 8003e34:	6026      	str	r6, [r4, #0]
 8003e36:	60a5      	str	r5, [r4, #8]
 8003e38:	463e      	mov	r6, r7
 8003e3a:	42be      	cmp	r6, r7
 8003e3c:	d900      	bls.n	8003e40 <__ssputs_r+0x70>
 8003e3e:	463e      	mov	r6, r7
 8003e40:	6820      	ldr	r0, [r4, #0]
 8003e42:	4632      	mov	r2, r6
 8003e44:	4641      	mov	r1, r8
 8003e46:	f000 faab 	bl	80043a0 <memmove>
 8003e4a:	68a3      	ldr	r3, [r4, #8]
 8003e4c:	1b9b      	subs	r3, r3, r6
 8003e4e:	60a3      	str	r3, [r4, #8]
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	4433      	add	r3, r6
 8003e54:	6023      	str	r3, [r4, #0]
 8003e56:	2000      	movs	r0, #0
 8003e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e5c:	462a      	mov	r2, r5
 8003e5e:	f000 fad7 	bl	8004410 <_realloc_r>
 8003e62:	4606      	mov	r6, r0
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d1e0      	bne.n	8003e2a <__ssputs_r+0x5a>
 8003e68:	6921      	ldr	r1, [r4, #16]
 8003e6a:	4650      	mov	r0, sl
 8003e6c:	f7ff feb8 	bl	8003be0 <_free_r>
 8003e70:	230c      	movs	r3, #12
 8003e72:	f8ca 3000 	str.w	r3, [sl]
 8003e76:	89a3      	ldrh	r3, [r4, #12]
 8003e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e7c:	81a3      	strh	r3, [r4, #12]
 8003e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e82:	e7e9      	b.n	8003e58 <__ssputs_r+0x88>

08003e84 <_svfiprintf_r>:
 8003e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e88:	4698      	mov	r8, r3
 8003e8a:	898b      	ldrh	r3, [r1, #12]
 8003e8c:	061b      	lsls	r3, r3, #24
 8003e8e:	b09d      	sub	sp, #116	; 0x74
 8003e90:	4607      	mov	r7, r0
 8003e92:	460d      	mov	r5, r1
 8003e94:	4614      	mov	r4, r2
 8003e96:	d50e      	bpl.n	8003eb6 <_svfiprintf_r+0x32>
 8003e98:	690b      	ldr	r3, [r1, #16]
 8003e9a:	b963      	cbnz	r3, 8003eb6 <_svfiprintf_r+0x32>
 8003e9c:	2140      	movs	r1, #64	; 0x40
 8003e9e:	f7ff ff0b 	bl	8003cb8 <_malloc_r>
 8003ea2:	6028      	str	r0, [r5, #0]
 8003ea4:	6128      	str	r0, [r5, #16]
 8003ea6:	b920      	cbnz	r0, 8003eb2 <_svfiprintf_r+0x2e>
 8003ea8:	230c      	movs	r3, #12
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb0:	e0d0      	b.n	8004054 <_svfiprintf_r+0x1d0>
 8003eb2:	2340      	movs	r3, #64	; 0x40
 8003eb4:	616b      	str	r3, [r5, #20]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8003eba:	2320      	movs	r3, #32
 8003ebc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ec0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ec4:	2330      	movs	r3, #48	; 0x30
 8003ec6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800406c <_svfiprintf_r+0x1e8>
 8003eca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ece:	f04f 0901 	mov.w	r9, #1
 8003ed2:	4623      	mov	r3, r4
 8003ed4:	469a      	mov	sl, r3
 8003ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eda:	b10a      	cbz	r2, 8003ee0 <_svfiprintf_r+0x5c>
 8003edc:	2a25      	cmp	r2, #37	; 0x25
 8003ede:	d1f9      	bne.n	8003ed4 <_svfiprintf_r+0x50>
 8003ee0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ee4:	d00b      	beq.n	8003efe <_svfiprintf_r+0x7a>
 8003ee6:	465b      	mov	r3, fp
 8003ee8:	4622      	mov	r2, r4
 8003eea:	4629      	mov	r1, r5
 8003eec:	4638      	mov	r0, r7
 8003eee:	f7ff ff6f 	bl	8003dd0 <__ssputs_r>
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	f000 80a9 	beq.w	800404a <_svfiprintf_r+0x1c6>
 8003ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003efa:	445a      	add	r2, fp
 8003efc:	9209      	str	r2, [sp, #36]	; 0x24
 8003efe:	f89a 3000 	ldrb.w	r3, [sl]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80a1 	beq.w	800404a <_svfiprintf_r+0x1c6>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f12:	f10a 0a01 	add.w	sl, sl, #1
 8003f16:	9304      	str	r3, [sp, #16]
 8003f18:	9307      	str	r3, [sp, #28]
 8003f1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f1e:	931a      	str	r3, [sp, #104]	; 0x68
 8003f20:	4654      	mov	r4, sl
 8003f22:	2205      	movs	r2, #5
 8003f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f28:	4850      	ldr	r0, [pc, #320]	; (800406c <_svfiprintf_r+0x1e8>)
 8003f2a:	f7fc f979 	bl	8000220 <memchr>
 8003f2e:	9a04      	ldr	r2, [sp, #16]
 8003f30:	b9d8      	cbnz	r0, 8003f6a <_svfiprintf_r+0xe6>
 8003f32:	06d0      	lsls	r0, r2, #27
 8003f34:	bf44      	itt	mi
 8003f36:	2320      	movmi	r3, #32
 8003f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f3c:	0711      	lsls	r1, r2, #28
 8003f3e:	bf44      	itt	mi
 8003f40:	232b      	movmi	r3, #43	; 0x2b
 8003f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f46:	f89a 3000 	ldrb.w	r3, [sl]
 8003f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f4c:	d015      	beq.n	8003f7a <_svfiprintf_r+0xf6>
 8003f4e:	9a07      	ldr	r2, [sp, #28]
 8003f50:	4654      	mov	r4, sl
 8003f52:	2000      	movs	r0, #0
 8003f54:	f04f 0c0a 	mov.w	ip, #10
 8003f58:	4621      	mov	r1, r4
 8003f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f5e:	3b30      	subs	r3, #48	; 0x30
 8003f60:	2b09      	cmp	r3, #9
 8003f62:	d94d      	bls.n	8004000 <_svfiprintf_r+0x17c>
 8003f64:	b1b0      	cbz	r0, 8003f94 <_svfiprintf_r+0x110>
 8003f66:	9207      	str	r2, [sp, #28]
 8003f68:	e014      	b.n	8003f94 <_svfiprintf_r+0x110>
 8003f6a:	eba0 0308 	sub.w	r3, r0, r8
 8003f6e:	fa09 f303 	lsl.w	r3, r9, r3
 8003f72:	4313      	orrs	r3, r2
 8003f74:	9304      	str	r3, [sp, #16]
 8003f76:	46a2      	mov	sl, r4
 8003f78:	e7d2      	b.n	8003f20 <_svfiprintf_r+0x9c>
 8003f7a:	9b03      	ldr	r3, [sp, #12]
 8003f7c:	1d19      	adds	r1, r3, #4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	9103      	str	r1, [sp, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bfbb      	ittet	lt
 8003f86:	425b      	neglt	r3, r3
 8003f88:	f042 0202 	orrlt.w	r2, r2, #2
 8003f8c:	9307      	strge	r3, [sp, #28]
 8003f8e:	9307      	strlt	r3, [sp, #28]
 8003f90:	bfb8      	it	lt
 8003f92:	9204      	strlt	r2, [sp, #16]
 8003f94:	7823      	ldrb	r3, [r4, #0]
 8003f96:	2b2e      	cmp	r3, #46	; 0x2e
 8003f98:	d10c      	bne.n	8003fb4 <_svfiprintf_r+0x130>
 8003f9a:	7863      	ldrb	r3, [r4, #1]
 8003f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f9e:	d134      	bne.n	800400a <_svfiprintf_r+0x186>
 8003fa0:	9b03      	ldr	r3, [sp, #12]
 8003fa2:	1d1a      	adds	r2, r3, #4
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	9203      	str	r2, [sp, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bfb8      	it	lt
 8003fac:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fb0:	3402      	adds	r4, #2
 8003fb2:	9305      	str	r3, [sp, #20]
 8003fb4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800407c <_svfiprintf_r+0x1f8>
 8003fb8:	7821      	ldrb	r1, [r4, #0]
 8003fba:	2203      	movs	r2, #3
 8003fbc:	4650      	mov	r0, sl
 8003fbe:	f7fc f92f 	bl	8000220 <memchr>
 8003fc2:	b138      	cbz	r0, 8003fd4 <_svfiprintf_r+0x150>
 8003fc4:	9b04      	ldr	r3, [sp, #16]
 8003fc6:	eba0 000a 	sub.w	r0, r0, sl
 8003fca:	2240      	movs	r2, #64	; 0x40
 8003fcc:	4082      	lsls	r2, r0
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	3401      	adds	r4, #1
 8003fd2:	9304      	str	r3, [sp, #16]
 8003fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fd8:	4825      	ldr	r0, [pc, #148]	; (8004070 <_svfiprintf_r+0x1ec>)
 8003fda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fde:	2206      	movs	r2, #6
 8003fe0:	f7fc f91e 	bl	8000220 <memchr>
 8003fe4:	2800      	cmp	r0, #0
 8003fe6:	d038      	beq.n	800405a <_svfiprintf_r+0x1d6>
 8003fe8:	4b22      	ldr	r3, [pc, #136]	; (8004074 <_svfiprintf_r+0x1f0>)
 8003fea:	bb1b      	cbnz	r3, 8004034 <_svfiprintf_r+0x1b0>
 8003fec:	9b03      	ldr	r3, [sp, #12]
 8003fee:	3307      	adds	r3, #7
 8003ff0:	f023 0307 	bic.w	r3, r3, #7
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	9303      	str	r3, [sp, #12]
 8003ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ffa:	4433      	add	r3, r6
 8003ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ffe:	e768      	b.n	8003ed2 <_svfiprintf_r+0x4e>
 8004000:	fb0c 3202 	mla	r2, ip, r2, r3
 8004004:	460c      	mov	r4, r1
 8004006:	2001      	movs	r0, #1
 8004008:	e7a6      	b.n	8003f58 <_svfiprintf_r+0xd4>
 800400a:	2300      	movs	r3, #0
 800400c:	3401      	adds	r4, #1
 800400e:	9305      	str	r3, [sp, #20]
 8004010:	4619      	mov	r1, r3
 8004012:	f04f 0c0a 	mov.w	ip, #10
 8004016:	4620      	mov	r0, r4
 8004018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800401c:	3a30      	subs	r2, #48	; 0x30
 800401e:	2a09      	cmp	r2, #9
 8004020:	d903      	bls.n	800402a <_svfiprintf_r+0x1a6>
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0c6      	beq.n	8003fb4 <_svfiprintf_r+0x130>
 8004026:	9105      	str	r1, [sp, #20]
 8004028:	e7c4      	b.n	8003fb4 <_svfiprintf_r+0x130>
 800402a:	fb0c 2101 	mla	r1, ip, r1, r2
 800402e:	4604      	mov	r4, r0
 8004030:	2301      	movs	r3, #1
 8004032:	e7f0      	b.n	8004016 <_svfiprintf_r+0x192>
 8004034:	ab03      	add	r3, sp, #12
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	462a      	mov	r2, r5
 800403a:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <_svfiprintf_r+0x1f4>)
 800403c:	a904      	add	r1, sp, #16
 800403e:	4638      	mov	r0, r7
 8004040:	f3af 8000 	nop.w
 8004044:	1c42      	adds	r2, r0, #1
 8004046:	4606      	mov	r6, r0
 8004048:	d1d6      	bne.n	8003ff8 <_svfiprintf_r+0x174>
 800404a:	89ab      	ldrh	r3, [r5, #12]
 800404c:	065b      	lsls	r3, r3, #25
 800404e:	f53f af2d 	bmi.w	8003eac <_svfiprintf_r+0x28>
 8004052:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004054:	b01d      	add	sp, #116	; 0x74
 8004056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800405a:	ab03      	add	r3, sp, #12
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	462a      	mov	r2, r5
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <_svfiprintf_r+0x1f4>)
 8004062:	a904      	add	r1, sp, #16
 8004064:	4638      	mov	r0, r7
 8004066:	f000 f879 	bl	800415c <_printf_i>
 800406a:	e7eb      	b.n	8004044 <_svfiprintf_r+0x1c0>
 800406c:	08004550 	.word	0x08004550
 8004070:	0800455a 	.word	0x0800455a
 8004074:	00000000 	.word	0x00000000
 8004078:	08003dd1 	.word	0x08003dd1
 800407c:	08004556 	.word	0x08004556

08004080 <_printf_common>:
 8004080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004084:	4616      	mov	r6, r2
 8004086:	4699      	mov	r9, r3
 8004088:	688a      	ldr	r2, [r1, #8]
 800408a:	690b      	ldr	r3, [r1, #16]
 800408c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004090:	4293      	cmp	r3, r2
 8004092:	bfb8      	it	lt
 8004094:	4613      	movlt	r3, r2
 8004096:	6033      	str	r3, [r6, #0]
 8004098:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800409c:	4607      	mov	r7, r0
 800409e:	460c      	mov	r4, r1
 80040a0:	b10a      	cbz	r2, 80040a6 <_printf_common+0x26>
 80040a2:	3301      	adds	r3, #1
 80040a4:	6033      	str	r3, [r6, #0]
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	0699      	lsls	r1, r3, #26
 80040aa:	bf42      	ittt	mi
 80040ac:	6833      	ldrmi	r3, [r6, #0]
 80040ae:	3302      	addmi	r3, #2
 80040b0:	6033      	strmi	r3, [r6, #0]
 80040b2:	6825      	ldr	r5, [r4, #0]
 80040b4:	f015 0506 	ands.w	r5, r5, #6
 80040b8:	d106      	bne.n	80040c8 <_printf_common+0x48>
 80040ba:	f104 0a19 	add.w	sl, r4, #25
 80040be:	68e3      	ldr	r3, [r4, #12]
 80040c0:	6832      	ldr	r2, [r6, #0]
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	42ab      	cmp	r3, r5
 80040c6:	dc26      	bgt.n	8004116 <_printf_common+0x96>
 80040c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040cc:	1e13      	subs	r3, r2, #0
 80040ce:	6822      	ldr	r2, [r4, #0]
 80040d0:	bf18      	it	ne
 80040d2:	2301      	movne	r3, #1
 80040d4:	0692      	lsls	r2, r2, #26
 80040d6:	d42b      	bmi.n	8004130 <_printf_common+0xb0>
 80040d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040dc:	4649      	mov	r1, r9
 80040de:	4638      	mov	r0, r7
 80040e0:	47c0      	blx	r8
 80040e2:	3001      	adds	r0, #1
 80040e4:	d01e      	beq.n	8004124 <_printf_common+0xa4>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	6922      	ldr	r2, [r4, #16]
 80040ea:	f003 0306 	and.w	r3, r3, #6
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	bf02      	ittt	eq
 80040f2:	68e5      	ldreq	r5, [r4, #12]
 80040f4:	6833      	ldreq	r3, [r6, #0]
 80040f6:	1aed      	subeq	r5, r5, r3
 80040f8:	68a3      	ldr	r3, [r4, #8]
 80040fa:	bf0c      	ite	eq
 80040fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004100:	2500      	movne	r5, #0
 8004102:	4293      	cmp	r3, r2
 8004104:	bfc4      	itt	gt
 8004106:	1a9b      	subgt	r3, r3, r2
 8004108:	18ed      	addgt	r5, r5, r3
 800410a:	2600      	movs	r6, #0
 800410c:	341a      	adds	r4, #26
 800410e:	42b5      	cmp	r5, r6
 8004110:	d11a      	bne.n	8004148 <_printf_common+0xc8>
 8004112:	2000      	movs	r0, #0
 8004114:	e008      	b.n	8004128 <_printf_common+0xa8>
 8004116:	2301      	movs	r3, #1
 8004118:	4652      	mov	r2, sl
 800411a:	4649      	mov	r1, r9
 800411c:	4638      	mov	r0, r7
 800411e:	47c0      	blx	r8
 8004120:	3001      	adds	r0, #1
 8004122:	d103      	bne.n	800412c <_printf_common+0xac>
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800412c:	3501      	adds	r5, #1
 800412e:	e7c6      	b.n	80040be <_printf_common+0x3e>
 8004130:	18e1      	adds	r1, r4, r3
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	2030      	movs	r0, #48	; 0x30
 8004136:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800413a:	4422      	add	r2, r4
 800413c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004144:	3302      	adds	r3, #2
 8004146:	e7c7      	b.n	80040d8 <_printf_common+0x58>
 8004148:	2301      	movs	r3, #1
 800414a:	4622      	mov	r2, r4
 800414c:	4649      	mov	r1, r9
 800414e:	4638      	mov	r0, r7
 8004150:	47c0      	blx	r8
 8004152:	3001      	adds	r0, #1
 8004154:	d0e6      	beq.n	8004124 <_printf_common+0xa4>
 8004156:	3601      	adds	r6, #1
 8004158:	e7d9      	b.n	800410e <_printf_common+0x8e>
	...

0800415c <_printf_i>:
 800415c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004160:	7e0f      	ldrb	r7, [r1, #24]
 8004162:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004164:	2f78      	cmp	r7, #120	; 0x78
 8004166:	4691      	mov	r9, r2
 8004168:	4680      	mov	r8, r0
 800416a:	460c      	mov	r4, r1
 800416c:	469a      	mov	sl, r3
 800416e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004172:	d807      	bhi.n	8004184 <_printf_i+0x28>
 8004174:	2f62      	cmp	r7, #98	; 0x62
 8004176:	d80a      	bhi.n	800418e <_printf_i+0x32>
 8004178:	2f00      	cmp	r7, #0
 800417a:	f000 80d4 	beq.w	8004326 <_printf_i+0x1ca>
 800417e:	2f58      	cmp	r7, #88	; 0x58
 8004180:	f000 80c0 	beq.w	8004304 <_printf_i+0x1a8>
 8004184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800418c:	e03a      	b.n	8004204 <_printf_i+0xa8>
 800418e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004192:	2b15      	cmp	r3, #21
 8004194:	d8f6      	bhi.n	8004184 <_printf_i+0x28>
 8004196:	a101      	add	r1, pc, #4	; (adr r1, 800419c <_printf_i+0x40>)
 8004198:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800419c:	080041f5 	.word	0x080041f5
 80041a0:	08004209 	.word	0x08004209
 80041a4:	08004185 	.word	0x08004185
 80041a8:	08004185 	.word	0x08004185
 80041ac:	08004185 	.word	0x08004185
 80041b0:	08004185 	.word	0x08004185
 80041b4:	08004209 	.word	0x08004209
 80041b8:	08004185 	.word	0x08004185
 80041bc:	08004185 	.word	0x08004185
 80041c0:	08004185 	.word	0x08004185
 80041c4:	08004185 	.word	0x08004185
 80041c8:	0800430d 	.word	0x0800430d
 80041cc:	08004235 	.word	0x08004235
 80041d0:	080042c7 	.word	0x080042c7
 80041d4:	08004185 	.word	0x08004185
 80041d8:	08004185 	.word	0x08004185
 80041dc:	0800432f 	.word	0x0800432f
 80041e0:	08004185 	.word	0x08004185
 80041e4:	08004235 	.word	0x08004235
 80041e8:	08004185 	.word	0x08004185
 80041ec:	08004185 	.word	0x08004185
 80041f0:	080042cf 	.word	0x080042cf
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	1d1a      	adds	r2, r3, #4
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	602a      	str	r2, [r5, #0]
 80041fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004204:	2301      	movs	r3, #1
 8004206:	e09f      	b.n	8004348 <_printf_i+0x1ec>
 8004208:	6820      	ldr	r0, [r4, #0]
 800420a:	682b      	ldr	r3, [r5, #0]
 800420c:	0607      	lsls	r7, r0, #24
 800420e:	f103 0104 	add.w	r1, r3, #4
 8004212:	6029      	str	r1, [r5, #0]
 8004214:	d501      	bpl.n	800421a <_printf_i+0xbe>
 8004216:	681e      	ldr	r6, [r3, #0]
 8004218:	e003      	b.n	8004222 <_printf_i+0xc6>
 800421a:	0646      	lsls	r6, r0, #25
 800421c:	d5fb      	bpl.n	8004216 <_printf_i+0xba>
 800421e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004222:	2e00      	cmp	r6, #0
 8004224:	da03      	bge.n	800422e <_printf_i+0xd2>
 8004226:	232d      	movs	r3, #45	; 0x2d
 8004228:	4276      	negs	r6, r6
 800422a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800422e:	485a      	ldr	r0, [pc, #360]	; (8004398 <_printf_i+0x23c>)
 8004230:	230a      	movs	r3, #10
 8004232:	e012      	b.n	800425a <_printf_i+0xfe>
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	6820      	ldr	r0, [r4, #0]
 8004238:	1d19      	adds	r1, r3, #4
 800423a:	6029      	str	r1, [r5, #0]
 800423c:	0605      	lsls	r5, r0, #24
 800423e:	d501      	bpl.n	8004244 <_printf_i+0xe8>
 8004240:	681e      	ldr	r6, [r3, #0]
 8004242:	e002      	b.n	800424a <_printf_i+0xee>
 8004244:	0641      	lsls	r1, r0, #25
 8004246:	d5fb      	bpl.n	8004240 <_printf_i+0xe4>
 8004248:	881e      	ldrh	r6, [r3, #0]
 800424a:	4853      	ldr	r0, [pc, #332]	; (8004398 <_printf_i+0x23c>)
 800424c:	2f6f      	cmp	r7, #111	; 0x6f
 800424e:	bf0c      	ite	eq
 8004250:	2308      	moveq	r3, #8
 8004252:	230a      	movne	r3, #10
 8004254:	2100      	movs	r1, #0
 8004256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800425a:	6865      	ldr	r5, [r4, #4]
 800425c:	60a5      	str	r5, [r4, #8]
 800425e:	2d00      	cmp	r5, #0
 8004260:	bfa2      	ittt	ge
 8004262:	6821      	ldrge	r1, [r4, #0]
 8004264:	f021 0104 	bicge.w	r1, r1, #4
 8004268:	6021      	strge	r1, [r4, #0]
 800426a:	b90e      	cbnz	r6, 8004270 <_printf_i+0x114>
 800426c:	2d00      	cmp	r5, #0
 800426e:	d04b      	beq.n	8004308 <_printf_i+0x1ac>
 8004270:	4615      	mov	r5, r2
 8004272:	fbb6 f1f3 	udiv	r1, r6, r3
 8004276:	fb03 6711 	mls	r7, r3, r1, r6
 800427a:	5dc7      	ldrb	r7, [r0, r7]
 800427c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004280:	4637      	mov	r7, r6
 8004282:	42bb      	cmp	r3, r7
 8004284:	460e      	mov	r6, r1
 8004286:	d9f4      	bls.n	8004272 <_printf_i+0x116>
 8004288:	2b08      	cmp	r3, #8
 800428a:	d10b      	bne.n	80042a4 <_printf_i+0x148>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	07de      	lsls	r6, r3, #31
 8004290:	d508      	bpl.n	80042a4 <_printf_i+0x148>
 8004292:	6923      	ldr	r3, [r4, #16]
 8004294:	6861      	ldr	r1, [r4, #4]
 8004296:	4299      	cmp	r1, r3
 8004298:	bfde      	ittt	le
 800429a:	2330      	movle	r3, #48	; 0x30
 800429c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042a4:	1b52      	subs	r2, r2, r5
 80042a6:	6122      	str	r2, [r4, #16]
 80042a8:	f8cd a000 	str.w	sl, [sp]
 80042ac:	464b      	mov	r3, r9
 80042ae:	aa03      	add	r2, sp, #12
 80042b0:	4621      	mov	r1, r4
 80042b2:	4640      	mov	r0, r8
 80042b4:	f7ff fee4 	bl	8004080 <_printf_common>
 80042b8:	3001      	adds	r0, #1
 80042ba:	d14a      	bne.n	8004352 <_printf_i+0x1f6>
 80042bc:	f04f 30ff 	mov.w	r0, #4294967295
 80042c0:	b004      	add	sp, #16
 80042c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	f043 0320 	orr.w	r3, r3, #32
 80042cc:	6023      	str	r3, [r4, #0]
 80042ce:	4833      	ldr	r0, [pc, #204]	; (800439c <_printf_i+0x240>)
 80042d0:	2778      	movs	r7, #120	; 0x78
 80042d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	6829      	ldr	r1, [r5, #0]
 80042da:	061f      	lsls	r7, r3, #24
 80042dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80042e0:	d402      	bmi.n	80042e8 <_printf_i+0x18c>
 80042e2:	065f      	lsls	r7, r3, #25
 80042e4:	bf48      	it	mi
 80042e6:	b2b6      	uxthmi	r6, r6
 80042e8:	07df      	lsls	r7, r3, #31
 80042ea:	bf48      	it	mi
 80042ec:	f043 0320 	orrmi.w	r3, r3, #32
 80042f0:	6029      	str	r1, [r5, #0]
 80042f2:	bf48      	it	mi
 80042f4:	6023      	strmi	r3, [r4, #0]
 80042f6:	b91e      	cbnz	r6, 8004300 <_printf_i+0x1a4>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	f023 0320 	bic.w	r3, r3, #32
 80042fe:	6023      	str	r3, [r4, #0]
 8004300:	2310      	movs	r3, #16
 8004302:	e7a7      	b.n	8004254 <_printf_i+0xf8>
 8004304:	4824      	ldr	r0, [pc, #144]	; (8004398 <_printf_i+0x23c>)
 8004306:	e7e4      	b.n	80042d2 <_printf_i+0x176>
 8004308:	4615      	mov	r5, r2
 800430a:	e7bd      	b.n	8004288 <_printf_i+0x12c>
 800430c:	682b      	ldr	r3, [r5, #0]
 800430e:	6826      	ldr	r6, [r4, #0]
 8004310:	6961      	ldr	r1, [r4, #20]
 8004312:	1d18      	adds	r0, r3, #4
 8004314:	6028      	str	r0, [r5, #0]
 8004316:	0635      	lsls	r5, r6, #24
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	d501      	bpl.n	8004320 <_printf_i+0x1c4>
 800431c:	6019      	str	r1, [r3, #0]
 800431e:	e002      	b.n	8004326 <_printf_i+0x1ca>
 8004320:	0670      	lsls	r0, r6, #25
 8004322:	d5fb      	bpl.n	800431c <_printf_i+0x1c0>
 8004324:	8019      	strh	r1, [r3, #0]
 8004326:	2300      	movs	r3, #0
 8004328:	6123      	str	r3, [r4, #16]
 800432a:	4615      	mov	r5, r2
 800432c:	e7bc      	b.n	80042a8 <_printf_i+0x14c>
 800432e:	682b      	ldr	r3, [r5, #0]
 8004330:	1d1a      	adds	r2, r3, #4
 8004332:	602a      	str	r2, [r5, #0]
 8004334:	681d      	ldr	r5, [r3, #0]
 8004336:	6862      	ldr	r2, [r4, #4]
 8004338:	2100      	movs	r1, #0
 800433a:	4628      	mov	r0, r5
 800433c:	f7fb ff70 	bl	8000220 <memchr>
 8004340:	b108      	cbz	r0, 8004346 <_printf_i+0x1ea>
 8004342:	1b40      	subs	r0, r0, r5
 8004344:	6060      	str	r0, [r4, #4]
 8004346:	6863      	ldr	r3, [r4, #4]
 8004348:	6123      	str	r3, [r4, #16]
 800434a:	2300      	movs	r3, #0
 800434c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004350:	e7aa      	b.n	80042a8 <_printf_i+0x14c>
 8004352:	6923      	ldr	r3, [r4, #16]
 8004354:	462a      	mov	r2, r5
 8004356:	4649      	mov	r1, r9
 8004358:	4640      	mov	r0, r8
 800435a:	47d0      	blx	sl
 800435c:	3001      	adds	r0, #1
 800435e:	d0ad      	beq.n	80042bc <_printf_i+0x160>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	079b      	lsls	r3, r3, #30
 8004364:	d413      	bmi.n	800438e <_printf_i+0x232>
 8004366:	68e0      	ldr	r0, [r4, #12]
 8004368:	9b03      	ldr	r3, [sp, #12]
 800436a:	4298      	cmp	r0, r3
 800436c:	bfb8      	it	lt
 800436e:	4618      	movlt	r0, r3
 8004370:	e7a6      	b.n	80042c0 <_printf_i+0x164>
 8004372:	2301      	movs	r3, #1
 8004374:	4632      	mov	r2, r6
 8004376:	4649      	mov	r1, r9
 8004378:	4640      	mov	r0, r8
 800437a:	47d0      	blx	sl
 800437c:	3001      	adds	r0, #1
 800437e:	d09d      	beq.n	80042bc <_printf_i+0x160>
 8004380:	3501      	adds	r5, #1
 8004382:	68e3      	ldr	r3, [r4, #12]
 8004384:	9903      	ldr	r1, [sp, #12]
 8004386:	1a5b      	subs	r3, r3, r1
 8004388:	42ab      	cmp	r3, r5
 800438a:	dcf2      	bgt.n	8004372 <_printf_i+0x216>
 800438c:	e7eb      	b.n	8004366 <_printf_i+0x20a>
 800438e:	2500      	movs	r5, #0
 8004390:	f104 0619 	add.w	r6, r4, #25
 8004394:	e7f5      	b.n	8004382 <_printf_i+0x226>
 8004396:	bf00      	nop
 8004398:	08004561 	.word	0x08004561
 800439c:	08004572 	.word	0x08004572

080043a0 <memmove>:
 80043a0:	4288      	cmp	r0, r1
 80043a2:	b510      	push	{r4, lr}
 80043a4:	eb01 0402 	add.w	r4, r1, r2
 80043a8:	d902      	bls.n	80043b0 <memmove+0x10>
 80043aa:	4284      	cmp	r4, r0
 80043ac:	4623      	mov	r3, r4
 80043ae:	d807      	bhi.n	80043c0 <memmove+0x20>
 80043b0:	1e43      	subs	r3, r0, #1
 80043b2:	42a1      	cmp	r1, r4
 80043b4:	d008      	beq.n	80043c8 <memmove+0x28>
 80043b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043be:	e7f8      	b.n	80043b2 <memmove+0x12>
 80043c0:	4402      	add	r2, r0
 80043c2:	4601      	mov	r1, r0
 80043c4:	428a      	cmp	r2, r1
 80043c6:	d100      	bne.n	80043ca <memmove+0x2a>
 80043c8:	bd10      	pop	{r4, pc}
 80043ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043d2:	e7f7      	b.n	80043c4 <memmove+0x24>

080043d4 <_sbrk_r>:
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	4d06      	ldr	r5, [pc, #24]	; (80043f0 <_sbrk_r+0x1c>)
 80043d8:	2300      	movs	r3, #0
 80043da:	4604      	mov	r4, r0
 80043dc:	4608      	mov	r0, r1
 80043de:	602b      	str	r3, [r5, #0]
 80043e0:	f7fc fe20 	bl	8001024 <_sbrk>
 80043e4:	1c43      	adds	r3, r0, #1
 80043e6:	d102      	bne.n	80043ee <_sbrk_r+0x1a>
 80043e8:	682b      	ldr	r3, [r5, #0]
 80043ea:	b103      	cbz	r3, 80043ee <_sbrk_r+0x1a>
 80043ec:	6023      	str	r3, [r4, #0]
 80043ee:	bd38      	pop	{r3, r4, r5, pc}
 80043f0:	200002a0 	.word	0x200002a0

080043f4 <memcpy>:
 80043f4:	440a      	add	r2, r1
 80043f6:	4291      	cmp	r1, r2
 80043f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80043fc:	d100      	bne.n	8004400 <memcpy+0xc>
 80043fe:	4770      	bx	lr
 8004400:	b510      	push	{r4, lr}
 8004402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800440a:	4291      	cmp	r1, r2
 800440c:	d1f9      	bne.n	8004402 <memcpy+0xe>
 800440e:	bd10      	pop	{r4, pc}

08004410 <_realloc_r>:
 8004410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004414:	4680      	mov	r8, r0
 8004416:	4614      	mov	r4, r2
 8004418:	460e      	mov	r6, r1
 800441a:	b921      	cbnz	r1, 8004426 <_realloc_r+0x16>
 800441c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004420:	4611      	mov	r1, r2
 8004422:	f7ff bc49 	b.w	8003cb8 <_malloc_r>
 8004426:	b92a      	cbnz	r2, 8004434 <_realloc_r+0x24>
 8004428:	f7ff fbda 	bl	8003be0 <_free_r>
 800442c:	4625      	mov	r5, r4
 800442e:	4628      	mov	r0, r5
 8004430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004434:	f000 f81b 	bl	800446e <_malloc_usable_size_r>
 8004438:	4284      	cmp	r4, r0
 800443a:	4607      	mov	r7, r0
 800443c:	d802      	bhi.n	8004444 <_realloc_r+0x34>
 800443e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004442:	d812      	bhi.n	800446a <_realloc_r+0x5a>
 8004444:	4621      	mov	r1, r4
 8004446:	4640      	mov	r0, r8
 8004448:	f7ff fc36 	bl	8003cb8 <_malloc_r>
 800444c:	4605      	mov	r5, r0
 800444e:	2800      	cmp	r0, #0
 8004450:	d0ed      	beq.n	800442e <_realloc_r+0x1e>
 8004452:	42bc      	cmp	r4, r7
 8004454:	4622      	mov	r2, r4
 8004456:	4631      	mov	r1, r6
 8004458:	bf28      	it	cs
 800445a:	463a      	movcs	r2, r7
 800445c:	f7ff ffca 	bl	80043f4 <memcpy>
 8004460:	4631      	mov	r1, r6
 8004462:	4640      	mov	r0, r8
 8004464:	f7ff fbbc 	bl	8003be0 <_free_r>
 8004468:	e7e1      	b.n	800442e <_realloc_r+0x1e>
 800446a:	4635      	mov	r5, r6
 800446c:	e7df      	b.n	800442e <_realloc_r+0x1e>

0800446e <_malloc_usable_size_r>:
 800446e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004472:	1f18      	subs	r0, r3, #4
 8004474:	2b00      	cmp	r3, #0
 8004476:	bfbc      	itt	lt
 8004478:	580b      	ldrlt	r3, [r1, r0]
 800447a:	18c0      	addlt	r0, r0, r3
 800447c:	4770      	bx	lr
	...

08004480 <_init>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	bf00      	nop
 8004484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004486:	bc08      	pop	{r3}
 8004488:	469e      	mov	lr, r3
 800448a:	4770      	bx	lr

0800448c <_fini>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr
